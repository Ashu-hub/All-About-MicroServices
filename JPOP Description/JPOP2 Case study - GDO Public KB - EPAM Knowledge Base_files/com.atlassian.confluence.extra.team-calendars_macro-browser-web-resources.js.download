WRMCB=function(e){var c=console;if(c&&c.log&&c.error){c.log('Error running batched script.');c.error(e);}}
;
try {
/* module-key = 'com.atlassian.confluence.extra.team-calendars:macro-browser-web-resources', location = 'com/atlassian/confluence/extra/calendar3/js/macro-browser.js' */
;(function($) {
    var initTeamCalendarsMacroForBrowser = function() {
        setOverrides("space-calendar")();
        setOverrides("team-calendar")();
        setOverrides("calendar")();
    };

    function getOpenerOverride(macroName) {
        return function(macro) {
            if(macro.params) {
                //HACK! - This seems very fragile. Is there a better way to do it?
                //What we do here is remove the 'opener' override and reopen the macro browser
                //We use the 'postPreview' override to re-add the 'opener' override after the browser has opened
                AJS.MacroBrowser.setMacroJsOverride(macroName, {
                    opener : null,
                    fields : getFieldsOverride(),
                    postPreview : setOverrides(macroName)});
                tinymce.confluence.macrobrowser.editMacro(AJS.Editor.Adapter.getEditor().selection.getNode());
            } else {
                Confluence.TeamCalendars.Dialogs.getAddDialogForMacro(macro);
            }
        }
    }

    function setOverrides(macroName) {
        return function() {
            AJS.MacroBrowser.setMacroJsOverride(macroName, {opener : getOpenerOverride(macroName), fields : getFieldsOverride()});
        }
    }

    function getFieldsOverride() {
        return {
            "string" : {
                "id" : function(param, options) {

                    var parameterContainer;

                    // we need to put some logic here to TC compatible with older version of AJS.MacroBrowser
                    if (AJS.MacroBrowser.makeParameterDiv)
                    {
                        // Deal with older version of AJS.MacroBrowser
                        parameterContainer = AJS.MacroBrowser.makeParameterDiv({}, { name: "id", type: "string" });
                    }
                    else
                    {
                        // Deal with latest version of AJS.MacroBrowser
                        parameterContainer = AJS.MacroBrowser.ParameterFields["string"](param, options).paramDiv;
                    }

                    var subCalendarSelect = $("<input/>", { "class" : "subcalendars-select", "type" : "hidden" });
                    var subCalendarsInput = $("input", parameterContainer).addClass("hidden").after(subCalendarSelect);
                    var setValue = function(subCalendarIds) {
                        if (subCalendarIds) {
                            var subCalendarIdsString = $.isArray(subCalendarIds) ? subCalendarIds.join(",") : subCalendarIds;
                            subCalendarsInput.val(subCalendarIdsString);

                            if (!subCalendarsInput.data("renderedInitialSelection")) {
                                subCalendarsInput.data("renderedInitialSelection", true); // Stop it from re-rendering user selections

                                $.ajax({
                                    cache: false,
                                    data : { subCalendarIds : subCalendarIdsString },
                                    dataType: "json",
                                    success : function(subCalendars) {
                                        if (subCalendars && $.isArray(subCalendars)) {
                                            subCalendarSelect.auiSelect2("data", $.map(subCalendars, function(aSubCalendar) {
                                                return {
                                                    "id" : aSubCalendar.id,
                                                    "text" : $("<span/>",  { "text" : aSubCalendar.name }).html()
                                                }
                                            }));
                                        }
                                    },
                                    timeout : Confluence.TeamCalendars.ajaxTimeout,
                                    url : AJS.contextPath() + "/rest/calendar-services/1.0/calendar/util/format/subcalendar/ids.json"
                                });
                            }
                        } else {
                            subCalendarsInput.val("");
                        }

                        subCalendarsInput.trigger("change");
                    };

                    subCalendarSelect.change(function() {
                        setValue($.trim(subCalendarSelect.auiSelect2("val")));
                    }).auiSelect2({
                        "minimumInputLength" : 1,
                        "formatNoMatches" : function(searchTerm) {
                            return $("<div/>").append(
                                    $("<span/>", { "text" : AJS.format("No calendars found with {0}.", searchTerm || "")})
                            ).html();
                        },
                        "formatInputTooShort" : function() {
                            return $("<div/>").append(
                                    $("<span/>", { "text" : "Start typing for suggestions" })
                            ).html();
                        },
                        "multiple" : true,
                        "query" : function(options) {
                            $.ajax({
                                "cache" : false,
                                "data":  {
                                    term: options.term,
                                    limit: 5,
                                    showSubCalendarsInView : "true"
                                },
                                "dataType" : "json",
                                "success" : function(searchResults) {
                                    options.callback({
                                        "results" : (function() {
                                            if (searchResults.payload && searchResults.payload.length) {
                                                return $.map(searchResults.payload, function(payload) {
                                                    return {
                                                        "id" : payload.subCalendar.id,
                                                        "text" : $("<span/>", { "text" : payload.subCalendar.name }).html()
                                                    }
                                                });
                                            }

                                            return [];
                                        })(),
                                        "more" : false
                                    });
                                    //HACK - work around for CONFDEV-15071
                                    $(".select2-drop-active").addClass("select2-drop");
                                },
                                timeout : Confluence.TeamCalendars.ajaxTimeout,
                                "url" : AJS.contextPath() + "/rest/calendar-services/1.0/calendar/search/subcalendars.json"
                            })
                        }
                    });

                    $(".select2-container", parameterContainer).after(
                        $("<div/>", { "class" : "id-desc", "html" : "Start typing for calendar suggestions or \u003cspan class=\u0022add-subcalendar\u0022\u003eadd a new calendar\u003c/span\u003e." }
                        ).click(function() {
                                AJS.MacroBrowser.close();
                                Confluence.TeamCalendars.Dialogs.getAddDialogForMacro({
                                    name: $("#macro-insert-container .macro-name").val(),
                                    params: (function() {
                                        var _theParams = {};
                                        $(".macro-param-input").each(function() {
                                                var aParam = $(this);
                                                _theParams[aParam.attr("id").substring(12)] = aParam.attr("type") === "checkbox" ? aParam.prop("checked") : aParam.val()
                                        });

                                        return _theParams;
                                    })(),
                                    defaultParameterValue: ""
                                });
                        })
                    );

                    return AJS.MacroBrowser.Field(parameterContainer, subCalendarsInput, $.extend({
                        setValue : function(value) {
                            setValue(value);
                        }
                    }), options);
                }
            }
        }
    }

    AJS.bind("init.rte", initTeamCalendarsMacroForBrowser);
})(jQuery);

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'com.atlassian.confluence.extra.team-calendars:macro-browser-web-resources', location = 'com/atlassian/confluence/extra/calendar3/eventmacro/js/macro-browser.js' */
// If you think this code is confusing I agree with you.
// See https://developer.atlassian.com/display/CONFDEV/Including+Information+in+your+Macro+for+the+Macro+Browser
// The reason it exists is to ensure that a value is set for the id parameter when a new macro is created.

AJS.bind("init.rte", function (initRteEvent, payload) {

    var generateId = function (){
        return Math.random().toString(36).substring(2);
    };

    if (tinymce.majorVersion === '4') {

        // Reset the `id` for pasted Event macro
        payload.editor.on('PastePostProcess', function(e) {
            var macroSerializer = Confluence.MacroParameterSerializer;
            var pastedEventMacros = e.node.querySelectorAll('.editor-inline-macro[data-macro-name="event"]');
            if (pastedEventMacros.length === 0) {
                return;
            }
            // IE does not support pastedEventMacros.forEach
            Array.prototype.forEach.call(pastedEventMacros, function (macro) {
                var params = macroSerializer.deserialize(macro.getAttribute('data-macro-parameters'));
                params.id = generateId();
                macro.setAttribute("data-macro-parameters", macroSerializer.serialize(params));
            });
        });

    } else {
        // Tinymce 3.x code - can be deleted once support for Confluence with Tinymce 3.4 is dropped (probably 7.something)
            
        //handle copy and paste Event Macro
        tinymce.activeEditor.onPostProcess.add(function(ed, pasteText) {
            try {
                //hack to get pasted text
                // Beware that `PostProcess` event fires at each content serialization, which means pretty much after every change.
                // This condition is abusing internal tinymce property and in 4.x API causes this routine to run each time -> resetting `id`.
                if (pasteText.getInner) {
                    // find out whether pasted text contains macro (including nested macro) or not
                    if(pasteText.content.indexOf("editor-inline-macro") === -1) {
                        return;
                    }

                    // help JQuery to deal with all html element which has same level
                    var $pastedElement = $('<div>').html(pasteText.content);
                    $pastedElement.find('.editor-inline-macro').each(function(index, macroNode) {
                        var $macroNode = $(macroNode);
                        var macroDeserializer = Confluence.MacroParameterSerializer;
                        var isMacro = $macroNode.hasClass('editor-inline-macro');
                        if (isMacro) {
                            var macroName = $macroNode.attr("data-macro-name");
                            if (macroName === "event") {
                                var params = macroDeserializer.deserialize($macroNode.attr("data-macro-parameters"));
                                params.id = generateId();
                                $macroNode.attr("data-macro-parameters", macroDeserializer.serialize(params));
                            }
                        }
                    });

                    // get back the pasted text
                    pasteText.content = $pastedElement.html();
                }
            } catch(err){
                if (AJS.logError){
                    AJS.logError("Could not parse paste content to handle copy Event Macro", err);
                }
            }
        });

    }

    // Make sure a value is set for the id field.
    AJS.MacroBrowser.setMacroJsOverride("event", {
        beforeParamsRetrieved : function(paramMap, macro, sharedParamMap) {
            var id = AJS.$("#macro-param-id").val();
            if (!id) {
                id = generateId();
                //If no id generate a random one.
                AJS.$("#macro-param-id").val(id);
                paramMap['id'] = id;
            }

            return paramMap;
        }
    });

    // Seems like we have to make sure this exists ourselves...
    AJS.MacroBrowser.getMacroJsOverride("event").fields = {};

    //Hide the id field.
    AJS.MacroBrowser.getMacroJsOverride("event").fields.string = {
        "id": function(param) {
            return AJS.MacroBrowser.ParameterFields["_hidden"] (param, {});
        }
    };
});


}catch(e){WRMCB(e)};