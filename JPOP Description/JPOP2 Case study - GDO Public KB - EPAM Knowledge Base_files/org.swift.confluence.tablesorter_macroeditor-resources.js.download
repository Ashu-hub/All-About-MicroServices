WRMCB=function(e){var c=console;if(c&&c.log&&c.error){c.log('Error running batched script.');c.error(e);}}
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/editor/soy/editor-main.soy' */
// This file was automatically generated from editor-main.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.editor == 'undefined') { org.swift.confluence.editor = {}; }


org.swift.confluence.editor.editorMain = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<section role="dialog" class="appfire aui-dialog2 aui-dialog2-xlarge aui-layer" data-aui-modal="true" aria-hidden="true"><form class="aui top-label"><!-- Dialog header -->' + org.swift.confluence.editor.editorHeader(opt_data) + '<div class="aui-dialog2-content"><div class="aui-group"><div class="aui-item appfire-navigation">' + org.swift.confluence.editor.editorNavigation(opt_data) + '</div><div class="aui-item appfire-content-panes">' + org.swift.confluence.editor.editorPanes(opt_data) + '</div>' + ((opt_data.showPreview) ? '<div class="aui-item appfire-preview-actions" style="position:relative">' + org.swift.confluence.editor.editorPreview(opt_data) + '</div><div class="aui-item appfire-preview-container" style="display:none"><div class="appfire-preview-header macro-preview-header"><span class="appfire-preview-title">Preview</span><button class="appfire-preview-refresh aui-button"><span class="aui-icon aui-icon-small aui-iconfont-refresh aui-iconfont-refresh-small">Refresh</span>&nbsp;&nbsp;Refresh</button></div><div class="appfire-preview-data"></div><div class="appfire-preview-loading" style="display:none"><span class="aui-icon aui-icon-large aui-icon-wait">Preview loading</span> Please wait while preview loads...</div></div>' : '') + '</div></div><!-- Dialog footer -->' + org.swift.confluence.editor.editorFooter({appVendor: 'Bob Swift Atlassian Apps (an Appfire company)'}) + '</form></section>';
};
if (goog.DEBUG) {
  org.swift.confluence.editor.editorMain.soyTemplateName = 'org.swift.confluence.editor.editorMain';
}


org.swift.confluence.editor.editorHeader = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<header class="aui-dialog2-header"><h2 class="aui-dialog2-header-main">' + soy.$$escapeHtml(opt_data.title) + '</h2></header>';
};
if (goog.DEBUG) {
  org.swift.confluence.editor.editorHeader.soyTemplateName = 'org.swift.confluence.editor.editorHeader';
}


org.swift.confluence.editor.editorNavigation = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '<nav class="primary">';
  var itemList25 = opt_data.navigation.primary;
  var itemListLen25 = itemList25.length;
  for (var itemIndex25 = 0; itemIndex25 < itemListLen25; itemIndex25++) {
    var itemData25 = itemList25[itemIndex25];
    output += '<div class="nav-item" data-index="' + soy.$$escapeHtml(itemIndex25) + '" ' + ((itemData25.activePanel) ? 'data-active-panel' : '') + ' title="' + soy.$$escapeHtml(itemData25.name) + '"><img src="' + soy.$$escapeHtml(itemData25.icon) + '"/></div>';
  }
  output += '</nav><nav class="secondary">';
  var itemList39 = opt_data.navigation.secondary;
  var itemListLen39 = itemList39.length;
  for (var itemIndex39 = 0; itemIndex39 < itemListLen39; itemIndex39++) {
    var itemData39 = itemList39[itemIndex39];
    output += '<div class="nav-item" title="' + soy.$$escapeHtml(itemData39.name) + '" data-url="' + soy.$$escapeHtml(itemData39.url) + '"><img src="' + soy.$$escapeHtml(itemData39.icon) + '"/></div>';
  }
  output += '</nav>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.editor.editorNavigation.soyTemplateName = 'org.swift.confluence.editor.editorNavigation';
}


org.swift.confluence.editor.editorPreview = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<nav class="primary"><a href="#" title="Show preview" class="appfire-preview-show"><img src="' + soy.$$escapeHtml(opt_data.contextPath) + '/download/resources/org.swift.confluence.tablesorter/editor/img/icon-preview-48.png")></a><a href="#" title="Hide preview" class="appfire-preview-hide"  style="display:none"><img src="' + soy.$$escapeHtml(opt_data.contextPath) + '/download/resources/org.swift.confluence.tablesorter/editor/img/icon-preview-48.png")></a></nav><nav class="secondary"><a href="#" title="Show Preview" class="appfire-preview-show"><img src="' + soy.$$escapeHtml(opt_data.contextPath) + '/download/resources/org.swift.confluence.tablesorter/editor/img/icon-expandLeft-48.png")></a><a href="#" title="Hide Preview" class="appfire-preview-hide" style="display:none"><img src="' + soy.$$escapeHtml(opt_data.contextPath) + '/download/resources/org.swift.confluence.tablesorter/editor/img/icon-expandRight-48.png")></a></nav>';
};
if (goog.DEBUG) {
  org.swift.confluence.editor.editorPreview.soyTemplateName = 'org.swift.confluence.editor.editorPreview';
}


org.swift.confluence.editor.editorPanes = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '';
  var itemList60 = opt_data.navigation.primary;
  var itemListLen60 = itemList60.length;
  for (var itemIndex60 = 0; itemIndex60 < itemListLen60; itemIndex60++) {
    var itemData60 = itemList60[itemIndex60];
    output += '<div class="content-panel"><h1>' + soy.$$escapeHtml(itemData60.name) + '</h1>' + soy.$$filterNoAutoescape(itemData60.panel) + '</div>';
  }
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.editor.editorPanes.soyTemplateName = 'org.swift.confluence.editor.editorPanes';
}


org.swift.confluence.editor.editorFooter = function(opt_data, opt_ignored) {
  return '<footer class="aui-dialog2-footer"><!-- Actions to render on the right of the footer --><aui-inline-dialog id="editor-error-msg" class="aui-help" alignment="bottom center"><div id="default-error-content"><p class="title"><strong>' + soy.$$escapeHtml('Configuration error!') + '</strong></p><p class="body">And this is just content in a Default message.</p></div></aui-inline-dialog><div class="aui-dialog2-footer-actions"><span id="show-editor-error" aria-controls="editor-error-msg" data-aui-trigger class="aui-icon aui-icon-large ' + soy.$$escapeHtml('aui-iconfont-error') + '" style="display:none"></span><button id="editor-save-button" class="aui-button aui-button-primary">Save settings</button><button id="editor-close-button" class="editor-dialog-close aui-button aui-button-link">Cancel</button></div><!-- Hint text is rendered on the left of the footer --><div class="aui-dialog2-footer-hint">' + soy.$$escapeHtml(opt_data.appVendor) + '</div></footer>';
};
if (goog.DEBUG) {
  org.swift.confluence.editor.editorFooter.soyTemplateName = 'org.swift.confluence.editor.editorFooter';
}


org.swift.confluence.editor.commonGridRowActions = function(opt_data, opt_ignored) {
  var output = '';
  var menuItemName__soy77 = opt_data.itemName ? opt_data.itemName : 'formatting';
  output += '<div class="col-1 row-actions">   \t                <!-- row actions --><button aria-controls="' + soy.$$escapeHtml(opt_data.controlId) + '" class="aui-button aui-dropdown2-trigger aui-dropdown2-trigger-arrowless aui-button-subtle aui-button-compact"><span class="aui-icon aui-icon-small aui-iconfont-more">More</span></button><aui-dropdown-menu class="row-action" id="' + soy.$$escapeHtml(opt_data.controlId) + '"><aui-item-link class="add-grid-row-above">Add ' + soy.$$escapeHtml(menuItemName__soy77) + ' above</aui-item-link><aui-item-link class="add-grid-row-below">Add ' + soy.$$escapeHtml(menuItemName__soy77) + ' below</aui-item-link><aui-item-link class="copy-grid-row">Copy ' + soy.$$escapeHtml(menuItemName__soy77) + '</aui-item-link><aui-item-link class="paste-grid-row">Paste ' + soy.$$escapeHtml(menuItemName__soy77) + '</aui-item-link>' + ((opt_data.showMoveUpDown) ? '<aui-item-link class="move-grid-row-up">Move up</aui-item-link><aui-item-link class="move-grid-row-down">Move down</aui-item-link>' : '') + '<aui-item-link class="clear-grid-row">Clear</aui-item-link><aui-item-link class="delete-grid-row">Delete</aui-item-link></aui-dropdown-menu></div>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.editor.commonGridRowActions.soyTemplateName = 'org.swift.confluence.editor.commonGridRowActions';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/editor/soy/fields-template.soy' */
// This file was automatically generated from fields-template.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.textElement = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '';
  var id__soy3 = opt_data.id ? opt_data.id : opt_data.name;
  var inputClass__soy4 = opt_data.inputClass ? opt_data.inputClass : 'long-field';
  output += (opt_data.topLabel) ? '<div class="field-group"><label for="' + soy.$$escapeHtml(opt_data.name) + '"><span class="appfire-editor-label-span">' + soy.$$escapeHtml(opt_data.label) + '</span>' + ((opt_data.required) ? '<span class="aui-icon icon-required appfire-icon-required">required</span>' : '') + ' ' + org.swift.confluence.table.editor.addHelpContent({id: id__soy3, helpContent: opt_data.helpContent}) + '</label><input class="text ' + soy.$$escapeHtml(inputClass__soy4) + ' ' + ((opt_data.required) ? ' appfire-editor-input-required' : '') + '" ' + ((opt_data.type) ? ' type="' + soy.$$escapeHtml(opt_data.type) + '" else type="text" ' : '') + '  id="' + soy.$$escapeHtml(id__soy3) + '" name="' + soy.$$escapeHtml(opt_data.name) + '" ' + ((opt_data.value || opt_data.value == 0 || opt_data.value == false) ? '  value=\'' + soy.$$escapeHtml(opt_data.value) + '\' ' : '') + '  ' + ((opt_data.type == 'number') ? ' min="0" ' : '') + ' autocomplete="new-password" />  ' + ((opt_data.description) ? '<div class="description">' + soy.$$escapeHtml(opt_data.description) + '</div>' : '') + '</div>' : '<div class="field-group"><div class="aui-group"><div class="aui-item toggle-label"><label for="' + soy.$$escapeHtml(opt_data.name) + '">' + soy.$$escapeHtml(opt_data.label) + ((opt_data.required) ? '<span class="aui-icon icon-required appfire-icon-required">required</span>' : '') + ' ' + org.swift.confluence.table.editor.addHelpContent({id: id__soy3, helpContent: opt_data.helpContent}) + '</label></div><div class="aui-item"><input class="text ' + soy.$$escapeHtml(inputClass__soy4) + ((opt_data.required) ? ' appfire-editor-input-required ' : '') + '" ' + ((opt_data.type) ? ' type="' + soy.$$escapeHtml(opt_data.type) + '" else type="text" ' : '') + ' name="' + soy.$$escapeHtml(opt_data.name) + '" id="' + soy.$$escapeHtml(id__soy3) + '" ' + ((opt_data.value || opt_data.value == 0 || opt_data.value == false) ? '  value=\'' + soy.$$escapeHtml(opt_data.value) + '\' ' : '') + ' ' + ((opt_data.type == 'number') ? ' min="0" ' : '') + '/>  </div>' + ((opt_data.description) ? '<div class="description">' + soy.$$escapeHtml(opt_data.description) + '</div>' : '') + '</div></div>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.textElement.soyTemplateName = 'org.swift.confluence.table.editor.textElement';
}


org.swift.confluence.table.editor.toggleElement = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '';
  var id__soy97 = opt_data.id ? opt_data.id : opt_data.name;
  output += '<div class="field-group"><label for="' + soy.$$escapeHtml(opt_data.name) + '">' + soy.$$escapeHtml(opt_data.label) + '  ' + org.swift.confluence.table.editor.addHelpContent({id: id__soy97, helpContent: opt_data.helpContent}) + '</label><aui-toggle class="appfire-toggle" id="' + soy.$$escapeHtml(id__soy97) + '" name="' + soy.$$escapeHtml(opt_data.name) + '"  label="' + soy.$$escapeHtml(opt_data.label) + '"  ' + ((opt_data.value) ? ' checked ' : '') + '></aui-toggle>   ' + ((opt_data.description) ? '<div class="description">' + soy.$$escapeHtml(opt_data.description) + '</div>' : '') + '</div>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.toggleElement.soyTemplateName = 'org.swift.confluence.table.editor.toggleElement';
}


org.swift.confluence.table.editor.customToggleElement = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '';
  var id__soy124 = opt_data.id ? opt_data.id : opt_data.name;
  output += '<div class="field-group"><label for="' + soy.$$escapeHtml(opt_data.name) + '">' + soy.$$escapeHtml(opt_data.label) + '  ' + org.swift.confluence.table.editor.addHelpContent({id: id__soy124, helpContent: opt_data.helpContent}) + '</label><div id="' + soy.$$escapeHtml(opt_data.name) + '" class="aui-buttons  appfire-custom-toggle"><input class="appfire-toggle-aui-button aui-button" aria-pressed=' + ((opt_data.value == opt_data.value1) ? ' "true" ' : ' "false" ') + ' value=\'' + soy.$$escapeHtml(opt_data.value1) + '\' readonly="readonly">' + soy.$$escapeHtml(opt_data.value1) + '</input><input class="appfire-toggle-aui-button aui-button" aria-pressed=' + ((opt_data.value == opt_data.value2) ? ' "true" ' : ' "false" ') + ' value=\'' + soy.$$escapeHtml(opt_data.value2) + '\' readonly="readonly">' + soy.$$escapeHtml(opt_data.value2) + '</input>   <input type="hidden" id="' + soy.$$escapeHtml(id__soy124) + '" name="' + soy.$$escapeHtml(opt_data.name) + '" value=\'' + soy.$$escapeHtml(opt_data.value) + '\'></div>' + ((opt_data.description) ? '<div class="description">' + soy.$$escapeHtml(opt_data.description) + '</div>' : '') + '</div>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.customToggleElement.soyTemplateName = 'org.swift.confluence.table.editor.customToggleElement';
}


org.swift.confluence.table.editor.addHelpContent = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '' + ((opt_data.helpContent) ? org.swift.confluence.table.editor.helpDialog({id: opt_data.id, content: opt_data.helpContent}) : '');
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.addHelpContent.soyTemplateName = 'org.swift.confluence.table.editor.addHelpContent';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/editor/soy/help-dialog.soy' */
// This file was automatically generated from help-dialog.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.helpDialog = function(opt_data, opt_ignored) {
  return '<a id="' + opt_data.id + 'HelpDialogLink" data-aui-trigger aria-controls="' + opt_data.id + 'HelpDialog" href="#"><span class="aui-icon aui-icon-small aui-iconfont-info">help</span></a><aui-inline-dialog id="' + opt_data.id + 'HelpDialog" class="aui-help appfire-help-dialogs" responds-to="hover"><p>' + opt_data.content + '</p></aui-inline-dialog>';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.helpDialog.soyTemplateName = 'org.swift.confluence.table.editor.helpDialog';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/soy/table-settings-panel.soy' */
// This file was automatically generated from table-settings-panel.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.tableSettingsPanel = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<div class="aui-tabs horizontal-tabs"><ul class="tabs-menu"><li class="menu-item active-tab"><a href="#tabs-table-formatting">Formatting</a></li><li class="menu-item"><a href="#tabs-table-advanced-settings">Advanced settings</a></li></ul><div class="tabs-pane active-pane" id="tabs-table-formatting"><div class="scrollable-tab-content"><fieldset>' + org.swift.confluence.table.editor.textElement({name: 'id', value: opt_data.id, label: 'Table id', topLabel: 'true', helpContent: 'Specify a table id for use in chart macros, Javascript, and custom styles. '}) + org.swift.confluence.table.editor.textElement({id: 'tableClass', name: 'class', value: opt_data['class'], label: 'Table class', topLabel: 'true', helpContent: 'Create custom tables with a table class along with using, for example, Space Stylesheets. '}) + org.swift.confluence.table.editor.textElement({name: 'style', value: opt_data.style, label: 'Table style', topLabel: 'true', helpContent: 'Apply styles to the table using \x3ca href\x3d\x22https://www.w3schools.com/css/default.asp\x22 target\x3d\x22_blank\x22\x3eCascading Style Sheets (CSS)\x3c/a\x3e. CSS is a simple mechanism for adding formatting to tables. '}) + ((opt_data.width != null) ? org.swift.confluence.table.editor.textElement({name: 'width', value: opt_data.width, label: 'Table width', topLabel: 'true'}) : '') + ((opt_data.border != null) ? org.swift.confluence.table.editor.textElement({name: 'border', value: opt_data.border, label: 'Border width', topLabel: 'true'}) : '') + '</fieldset></div></div><div class="tabs-pane" id="tabs-table-advanced-settings"><div class="scrollable-tab-content"><fieldset>' + org.swift.confluence.table.editor.toggleElement({name: 'allowExport', value: opt_data.allowExport, label: 'Enable download and export as attachment'}) + ((opt_data.macroName == 'table-plus') ? org.swift.confluence.table.editor.toggleElement({name: 'multiple', value: opt_data.multiple, label: 'Apply settings to nested tables'}) : '') + '</fieldset></div></div></div>';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.tableSettingsPanel.soyTemplateName = 'org.swift.confluence.table.editor.tableSettingsPanel';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/soy/column-settings-panel.soy' */
// This file was automatically generated from column-settings-panel.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.columnSettingsPanel = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '<div class="aui-tabs horizontal-tabs"><ul class="tabs-menu"><li class="menu-item active-tab"><a href="#column-formatting">Formatting</a></li><li class="menu-item"><a href="#column-totaling">Numbering & totaling</a></li><li class="menu-item"><a href="#column-sorting">Sorting</a></li></ul><div class="tabs-pane active-pane" id="column-formatting"><fieldset class="appfire-grid-set">';
  var dataColumnStylesLength__soy4 = opt_data.autoNumber ? opt_data.columnStyles.length - 1 : opt_data.columnStyles.length;
  var rowCount__soy5 = Math.max(0, Math.max(Math.max(opt_data.columnTypes.length, opt_data.columnCalculations.length), Math.max(dataColumnStylesLength__soy4, opt_data.columnAttributes.length)));
  output += '<div class="grid-bar"  ' + ((rowCount__soy5 == 0) ? ' style="display: none;" ' : '') + '><h3>Columns  ' + org.swift.confluence.table.editor.addHelpContent({name: 'columnFormatting', id: 'columnFormatting', helpContent: '\x3ca href\x3d\x22https://bobswift.atlassian.net/wiki/x/KQCLMw\x22 target\x3d\x22Advanced Tables Help\x22 \x3eColumn styles\x3c/a\x3e accepts one or more \x3ca href\x3d\x22https://www.w3schools.com/css/default.asp\x22 target\x3d\x22_blank\x22\x3eCSS\x3c/a\x3e properties to control formatting. e.g. background:lightyellow \x3cbr/\x3e\x3cbr/\x3e\x3ca href\x3d\x22https://bobswift.atlassian.net/wiki/x/JICGMw\x22  target\x3d\x22Advanced Tables Help\x22 \x3eColumn type\x3c/a\x3e is used with \x3ca href\x3d\x22https://bobswift.atlassian.net/wiki/x/JICGMw\x22  target\x3d\x22Advanced Tables Help\x22 \x3eTotal type\x3c/a\x3e to summarize and format the data. e.g. C\x22\x26#36;0.00\x22. Total type works only when \x3ci\x3eAuto total numeric columns\x3c/i\x3e is enabled under Numbering \x26 totaling.'}) + '</h3><div class="grid-bar-actions"><button class="aui-button add-grid-row" data-grid="#column-positions"><span class="aui-icon aui-icon-small aui-iconfont-add"></span> Add formatting</button><button class="aui-button aui-dropdown2-trigger aui-dropdown2-trigger-arrowless" aria-controls="column-settings-dropdown"><span class="aui-icon aui-icon-small aui-iconfont-configure">Configure display</span></button><aui-dropdown-menu id="column-settings-dropdown"><aui-item-checkbox id="show-hide-col-attrs" ' + ((opt_data.columnAttributes.length > 0) ? 'checked' : '') + '>Show column attributes</aui-item-checkbox><aui-item-checkbox id ="show-hide-empty-pos-rows" checked>Show empty columns</aui-item-checkbox></aui-dropdown-menu></div></div><div id="column-positions" class="scrollable-area appfire-grid"><div class="grid-empty-msg" ' + ((rowCount__soy5 > 0) ? ' style="display: none;" ' : '') + '>' + org.swift.confluence.table.editor.columnSettingsEmpty(null) + '</div>';
  var positionLimit26 = rowCount__soy5;
  for (var position26 = 0; position26 < positionLimit26; position26++) {
    output += org.swift.confluence.table.editor.columnPositionRow({position: position26, columnAttributes: opt_data.columnAttributes, columnCalculations: opt_data.columnCalculations, columnStyles: opt_data.columnStyles, columnTypes: opt_data.columnTypes, autoNumber: opt_data.autoNumber});
  }
  output += '</div><fieldset></div><!-- tabs-pane column-formatting close--><div class="tabs-pane" id="column-totaling"><div class="scrollable-tab-content"><fieldset><h3>Numbering</h3>' + org.swift.confluence.table.editor.toggleElement({name: 'autoNumber', value: opt_data.autoNumber, label: 'Insert auto number column', helpContent: 'Column numbering adds a column to your table that includes row numbers and can affect column formatting on your data columns if you specified your formatting using column numbers. '}) + org.swift.confluence.table.editor.textElement({name: 'autoNumberColStyles', type: 'text', value: opt_data.autoNumber && opt_data.columnStyles[0] != '' ? opt_data.columnStyles[0] : opt_data.autoNumberColStyles, label: 'Auto number column styles', topLabel: 'true', helpContent: 'Apply styles to the auto number column using \x3ca href\x3d\x22https://www.w3schools.com/css/default.asp\x22 target\x3d\x22_blank\x22\x3eCascading Style Sheets (CSS)\x3c/a\x3e when auto number is enabled.'}) + ((opt_data.macroName != 'attachment-table') ? org.swift.confluence.table.editor.toggleElement({name: 'autoNumberSort', value: opt_data.autoNumberSort, label: 'Enable sorting on auto number column'}) : '') + '<!-- TODO: where will this fit?? -->' + org.swift.confluence.table.editor.toggleElement({name: 'enableHeadingAttributes', value: opt_data.enableHeadingAttributes, label: 'Apply column attributes to header rows'}) + '</fieldset><fieldset><h3>Totaling</h3>' + org.swift.confluence.table.editor.toggleElement({name: 'autoTotal', value: opt_data.autoTotal, label: 'Auto total numeric columns'}) + '</fieldset></div></div><!-- tabs-pane column-totaling close--><div class="tabs-pane" id="column-sorting"><div class="scrollable-tab-content"><fieldset>' + org.swift.confluence.table.editor.toggleElement({name: 'enableSorting', value: opt_data.enableSorting, label: 'Enable column sorting'}) + org.swift.confluence.table.editor.textElement({name: 'sortColumn', value: opt_data.sortColumn, label: 'Automatically sort by this column', topLabel: 'true', helpContent: 'Column name or number for automatic sorting on first display.'}) + org.swift.confluence.table.editor.toggleElement({name: 'sortDescending', value: opt_data.sortDescending, label: 'Automatically sort in descending order'}) + org.swift.confluence.table.editor.toggleElement({name: 'sortIcon', value: opt_data.sortIcon, label: 'Display sort icon'}) + org.swift.confluence.table.editor.textElement({name: 'sortTip', value: opt_data.sortTip, label: 'Sort tip text', topLabel: 'true'}) + '</fieldset></div></div><!-- tabs-pane column-sorting close--></div>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.columnSettingsPanel.soyTemplateName = 'org.swift.confluence.table.editor.columnSettingsPanel';
}


org.swift.confluence.table.editor.columnSettingsEmpty = function(opt_data, opt_ignored) {
  return '<div class="appfire-empty"><div class="appfire-empty-image"><svg id="Col_ATEmptyState" class="play" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 258.25 153.8"><path id="Col_Shadow" fill="none" stroke="#F0F0F0" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M34.62 152.3h191"/><linearGradient id="Col_Background_1_" gradientUnits="userSpaceOnUse" x1="-6117.154" y1="-753.957" x2="-6117.154" y2="-879.877" gradientTransform="translate(6246.278 880.56)"><stop offset="0" stop-color="#FFF"/><stop offset="1" stop-color="#F0FAFA"/></linearGradient><path id="Col_Background" fill="url(#Col_Background_1_)" d="M242.85 78.08c7.07 17.84 27.54 32.36-3.62 45.7-9.64 4.13-43.39-11.37-59.51-7.56-15.94 3.76-28.46 8.47-45.22 9.91-25.3 2.18-33.96-3.53-55.41-8.23-13.6-2.98-26.78 2.31-38.83.43-32.54-5.06-55.01-45.29-28.7-70.77 8.61-8.34 23.02-7.13 33.42-15.45C61.9 18.56 52.73 2.14 83.04 2.98c30.15.85 47.19 16.44 80.72 9.89 22.14-4.33 78.27-28.17 92.7 5.69 9.57 22.45-22.73 34.76-13.61 59.52z"/><g id="Col_Socket"><linearGradient id="Col_SVGID_1_" gradientUnits="userSpaceOnUse" x1="41.204" y1="856.587" x2="52.996" y2="877.013" gradientTransform="translate(0 -738)"><stop offset="0" stop-color="#FFF"/><stop offset=".5" stop-color="#F9F9F9"/><stop offset="1" stop-color="#F0F0F0"/></linearGradient><path fill="url(#Col_SVGID_1_)" d="M51.1 139.8h-8c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h8c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><path fill="none" stroke="#333" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M45.1 121.8v2M49.1 121.8v2"/><circle fill="#333" cx="47.1" cy="126.8" r="1"/><path fill="none" stroke="#333" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M45.1 131v2M49.1 131v2"/><circle fill="#333" cx="47.1" cy="136" r="1"/></g><g id="Col_Plug"><circle id="Col_PlugEnd" fill="#333" cx="47.1" cy="133.8" r="4"/><path id="Col_PlugCord" fill="none" stroke="#333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M73.12 101.8h-4c-2.8 0-5 2.2-5 5l-.02 38c0 2.8-2.2 5-5 5h-7c-2.8 0-5-2.2-5-5v-10"/><path id="Col_PlugStart" fill="#333" d="M74.12 97.8c-2.2 0-4 1.8-4 4s1.8 4 4 4v-8z"/></g><g id="Col_Table"><g id="Col_TableHanger" fill="none" stroke="#F0F0F0" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10"><path d="M90.12 22.8v-21M186.12 22.8v-21"/></g><g id="Col_TableBG"><linearGradient id="Col_SVGID_2_" gradientUnits="userSpaceOnUse" x1="156.612" y1="146.621" x2="131.637" y2="4.981"><stop offset="0" stop-color="#FFB672"/><stop offset="1" stop-color="#FCD9BE"/></linearGradient><path fill="url(#Col_SVGID_2_)" d="M210.12 14.8h-134a2 2 0 0 0-2 2v118a2 2 0 0 0 2 2h136a2 2 0 0 0 2-2v-118a2 2 0 0 0-2-2h-2z"/><path opacity=".1" fill="#FFF" d="M78.12 20.8a2 2 0 0 1 2-2h134v-2a2 2 0 0 0-2-2h-136a2 2 0 0 0-2 2v118c0 1.1.9 2 2 2h2v-116z"/></g><g id="Col_LightOff4"><path fill="#F2F2F2" d="M180.13 130.8v-94a2 2 0 0 1 2-2h26a2 2 0 0 1 2 2v94a2 2 0 0 1-2 2h-26c-1.11 0-2-.89-2-2z"/><path opacity=".25" fill="#CCC" d="M195.63 132.8v-4.5h9.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-20c-.28 0-.5.22-.5.5s.22.5.5.5h9.5v4.5h1zM194.63 34.8v4.5h-9.5c-.28 0-.5.22-.5.5s.22.5.5.5h20c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9.5v-4.5h-1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M185.13 127.8V39.79M195.13 39.79v88.01M205.14 39.79v88.01"/></g><g id="Col_LightOff3"><path fill="#F2F2F2" d="M146.13 130.8v-94a2 2 0 0 1 2-2h26a2 2 0 0 1 2 2v94a2 2 0 0 1-2 2h-26c-1.11 0-2-.89-2-2z"/><path opacity=".25" fill="#CCC" d="M161.63 132.8v-4.5h9.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-20c-.28 0-.5.22-.5.5s.22.5.5.5h9.5v4.5h1zM160.63 34.8v4.5h-9.5c-.28 0-.5.22-.5.5s.22.5.5.5h20c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9.5v-4.5h-1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M151.13 127.8V39.79M161.13 39.79v88.01M171.14 39.79v88.01"/></g><g id="Col_LightOff2"><path fill="#F2F2F2" d="M112.12 130.8v-94a2 2 0 0 1 2-2h26a2 2 0 0 1 2 2v94a2 2 0 0 1-2 2h-26a2 2 0 0 1-2-2z"/><path opacity=".25" fill="#CCC" d="M127.62 132.8v-4.5h9.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-20c-.28 0-.5.22-.5.5s.22.5.5.5h9.5v4.5h1zM126.62 34.8v4.5h-9.5c-.28 0-.5.22-.5.5s.22.5.5.5h20c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9.5v-4.5h-1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M117.13 127.8V39.79M127.13 39.79v88.01M137.14 39.79v88.01"/></g><g id="Col_LightOff1"><path fill="#F2F2F2" d="M78.12 130.8v-94a2 2 0 0 1 2-2h26a2 2 0 0 1 2 2v94a2 2 0 0 1-2 2h-26a2 2 0 0 1-2-2z"/><path opacity=".25" fill="#CCC" d="M93.62 132.8v-4.5h9.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-20c-.28 0-.5.22-.5.5s.22.5.5.5h9.5v4.5h1zM92.62 34.8v4.5h-9.5c-.28 0-.5.22-.5.5s.22.5.5.5h20c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9.5v-4.5h-1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M83.13 127.8V39.79M93.13 39.79v88.01M103.14 39.79v88.01"/></g><g id="Col_LightOn1"><linearGradient id="Col_SVGID_3_" gradientUnits="userSpaceOnUse" x1="-574.875" y1="874.802" x2="-574.875" y2="844.802" gradientTransform="rotate(90 147.124 805.802)"><stop offset="0" stop-color="#89D8E5"/><stop offset=".024" stop-color="#8CDCEB"/><stop offset=".099" stop-color="#94E5F6"/><stop offset=".205" stop-color="#98EBFD"/><stop offset=".5" stop-color="#99ECFF"/><stop offset=".795" stop-color="#98EBFD"/><stop offset=".901" stop-color="#94E5F6"/><stop offset=".976" stop-color="#8CDCEB"/><stop offset="1" stop-color="#89D8E5"/></linearGradient><path fill="url(#Col_SVGID_3_)" d="M78.12 130.8v-94a2 2 0 0 1 2-2h26a2 2 0 0 1 2 2v94a2 2 0 0 1-2 2h-26a2 2 0 0 1-2-2z"/><g opacity=".5"><linearGradient id="Col_SVGID_4_" gradientUnits="userSpaceOnUse" x1="-574.884" y1="863.829" x2="-574.884" y2="855.801" gradientTransform="rotate(90 147.124 805.802)"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Col_SVGID_4_)" d="M89.1 39.79h8.03v88.02H89.1z"/></g><g opacity=".5"><linearGradient id="Col_SVGID_5_" gradientUnits="userSpaceOnUse" x1="-574.884" y1="873.815" x2="-574.884" y2="865.787" gradientTransform="rotate(90 147.124 805.802)"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Col_SVGID_5_)" d="M79.11 39.79h8.03v88.02h-8.03z"/></g><path opacity=".1" fill="#3DB2CB" d="M93.62 132.8v-4.5h9.5c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-20c-.28 0-.5.22-.5.5s.22.5.5.5h9.5v4.5h1zM92.62 34.8v4.5h-9.5c-.28 0-.5.22-.5.5s.22.5.5.5h20c.28 0 .5-.22.5-.5s-.22-.5-.5-.5h-9.5v-4.5h-1z"/><path opacity=".25" fill="none" stroke="#FFF" stroke-width="2" stroke-linecap="round" stroke-miterlimit="10" d="M83.12 127.8V39.79M93.12 39.79v88.01"/><g opacity=".5"><linearGradient id="Col_SVGID_6_" gradientUnits="userSpaceOnUse" x1="-574.884" y1="853.815" x2="-574.884" y2="845.787" gradientTransform="rotate(90 147.124 805.802)"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Col_SVGID_6_)" d="M99.11 39.79h8.03v88.02h-8.03z"/></g><path opacity=".25" fill="none" stroke="#FFF" stroke-width="2" stroke-linecap="round" stroke-miterlimit="10" d="M103.14 39.79v88.01"/></g></g><path fill="#FFF" d="M11.56 47.55c8.61-8.34 23.02-7.13 33.42-15.45C61.9 18.56 52.73 2.14 83.04 2.98c30.15.85 47.19 16.44 80.72 9.89 22.14-4.33 78.27-28.17 92.7 5.69.92 2.15 1.45 4.23 1.67 6.25V0H.13v70.86c.66-8.19 4.2-16.3 11.43-23.31z" id="Col_Mask"/></svg></div><div class="appfire-empty-content"><h3>Power up your columns</h3><p>Give your columns some character by applying a few simple settings.</p><p>Start with column number <input class="rows-to-add" type="number" min="0" max="30" value="1"></input></p><p class="error" style="color:#de350b; display: none;"">Enter a number between 0 and 30.</p><button class="start-formatting aui-button aui-button-primary">Start formatting</button></div></div>';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.columnSettingsEmpty.soyTemplateName = 'org.swift.confluence.table.editor.columnSettingsEmpty';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/soy/column-position-row.soy' */
// This file was automatically generated from column-position-row.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.columnPositionRow = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '<div class="grid appfire-row"> <!-- row --><div class="col-1 row-header row-header-narrow">  \t\t<!-- row thumb cell --><h4 class="row-number">' + soy.$$escapeHtml(opt_data.position + 1) + '</h4></div>                        \t\t                <!-- row thumb cell --><div class="col-auto row-data">                       <!-- row data --><div class="grid show-hide-empty"><div class="col-md-auto" data-collapsible="col-md-auto"><div class="field-group"><label for="text-input">Column styles</label>' + ((opt_data.autoNumber) ? '<input class="text full-width-field row-data-element" type="text" name="columnStyles" title="Text input" ' + ((opt_data.columnStyles[opt_data.position + 1]) ? ' value="' + soy.$$escapeHtml(opt_data.columnStyles[opt_data.position + 1]) + '" ' : '') + '/>' : '<input class="text full-width-field row-data-element" type="text" name="columnStyles" title="Text input" ' + ((opt_data.columnStyles[opt_data.position]) ? ' value="' + soy.$$escapeHtml(opt_data.columnStyles[opt_data.position]) + '" ' : '') + '/>') + '</div></div>';
  var colType__soy24 = opt_data.columnTypes[opt_data.position] ? opt_data.columnTypes[opt_data.position] : '';
  output += '<div class="col-md-auto" data-collapsible="col-md-auto"><div class="field-group"><label for="columnTypes">Column type</label><input type="hidden" name="columnTypes" ' + ((colType__soy24) ? ' value="' + soy.$$escapeHtml(colType__soy24) + '" ' : '') + '/><aui-select class="column-types-select" can-create-values="true" id="column-types-select-' + soy.$$escapeHtml(opt_data.position) + '" ><aui-option ' + ((colType__soy24 == 'I' || colType__soy24 == 'i') ? ' selected ' : '') + ' value="I">Integer (I)</aui-option><aui-option ' + ((colType__soy24 == 'S' || colType__soy24 == 's') ? ' selected ' : '') + ' value="S">String (S)</aui-option><aui-option ' + ((colType__soy24 == 'F' || colType__soy24 == 'f') ? ' selected ' : '') + ' value="F">Numeric and float values (F)</aui-option><aui-option ' + ((colType__soy24 == 'FF' || colType__soy24 == 'ff') ? ' selected ' : '') + ' value="FF">Numeric with data formatting (FF)</aui-option><aui-option ' + ((colType__soy24 == 'FC' || colType__soy24 == 'fc') ? ' selected ' : '') + ' value="FC">Float with comma as decimal point (FC)</aui-option><aui-option ' + ((colType__soy24 == 'C' || colType__soy24 == 'c') ? ' selected ' : '') + ' value="C">Currency (C)</aui-option><aui-option ' + ((colType__soy24 == 'CC' || colType__soy24 == 'cc') ? ' selected ' : '') + ' value="CC">Currency with comma as decimal points (CC)</aui-option><aui-option ' + ((colType__soy24 == 'M' || colType__soy24 == 'm') ? ' selected ' : '') + ' value="M">Date (M)</aui-option><aui-option ' + ((colType__soy24 == 'D' || colType__soy24 == 'd') ? ' selected ' : '') + ' value="D">Date in the browser date format (D)</aui-option><aui-option ' + ((colType__soy24 == 'E' || colType__soy24 == 'e') ? ' selected ' : '') + ' value="E">Complex HTML elements like emotions or similar (E)</aui-option><aui-option ' + ((colType__soy24 == 'X' || colType__soy24 == 'x') ? ' selected ' : '') + ' value="X">Exclude this column from user selectable sorting (X)</aui-option><aui-option ' + ((colType__soy24 == 'H' || colType__soy24 == 'h') ? ' selected ' : '') + ' value="H">Hide the column (H)</aui-option>' + ((colType__soy24 && ! (('|I|S|F|FF|FC|C|CC|M|D|E|X|H|').indexOf('' + ('|' + colType__soy24 + '|')) != -1) && ! (('|i|s|f|ff|fc|c|cc|m|d|e|x|h|').indexOf('' + ('|' + colType__soy24 + '|')) != -1)) ? '<aui-option value="' + soy.$$escapeHtml(colType__soy24) + '" selected>' + soy.$$escapeHtml(colType__soy24) + '</aui-option>' : '') + '</aui-select></div></div><div class="col-sm-auto" data-collapsible="col-sm-auto"><div class="field-group">';
  var val__soy90 = opt_data.columnCalculations && opt_data.columnCalculations.length > 0 && opt_data.position < opt_data.columnCalculations.length ? opt_data.columnCalculations[opt_data.position] : '';
  output += '<label for="columnCalculations">Total type</label><input type="hidden" name="columnCalculations" ' + ((val__soy90) ? ' value="' + soy.$$escapeHtml(val__soy90) + '" ' : '') + ' /><aui-select class="column-calculations-select" can-create-values="true"><aui-option value="sum" ' + ((val__soy90 == 'sum') ? ' selected ' : '') + '>' + soy.$$escapeHtml('Sum') + '</aui-option><aui-option value="avg" ' + ((val__soy90 == 'avg') ? ' selected ' : '') + '>' + soy.$$escapeHtml('Average') + '</aui-option><aui-option value="avgignorezero" ' + ((val__soy90 == 'avgignorezero') ? ' selected ' : '') + '>' + soy.$$escapeHtml('Average (ignore zeros and blanks)') + '</aui-option>' + ((val__soy90 && ! (('|sum|avg|avgignorezero|').indexOf('' + ('|' + val__soy90 + '|')) != -1)) ? '<aui-option value="' + soy.$$escapeHtml(val__soy90) + '" selected>' + soy.$$escapeHtml(val__soy90) + '</aui-option>' : '') + '</aui-select></div></div><div class="col-sm-auto column-attributes" data-collapsible="col-sm-auto"  ' + ((opt_data.columnAttributes.length == 0) ? ' style="display:none;" ' : '') + '><div class="field-group"><label for="text-input">Column attributes</label><input class="text full-width-field row-data-element" type="text" name="columnAttributes" title="Text input"  ' + ((opt_data.columnAttributes[opt_data.position]) ? ' value="' + soy.$$escapeHtml(opt_data.columnAttributes[opt_data.position]) + '" ' : '') + '/></div></div></div></div>                                              <!-- row data -->' + org.swift.confluence.editor.commonGridRowActions({controlId: 'col-position-action-' + opt_data.position}) + '</div>                                                              <!-- row -->';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.columnPositionRow.soyTemplateName = 'org.swift.confluence.table.editor.columnPositionRow';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/soy/row-position-row.soy' */
// This file was automatically generated from row-position-row.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.rowPositionRow = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<div class="grid appfire-row"> <!-- row --><div class="col-1 row-header row-header-narrow">  \t\t<!-- row thumb cell --><h4 class="row-number">' + soy.$$escapeHtml(opt_data.position) + '</h4></div>                        \t\t<!-- row thumb cell --><div class="col-auto row-data"> <!-- row content --><div class="grid"><div class="col-md-auto" data-collapsible="col-md-auto"><div class="field-group"><label for="text-input">Row styles</label><input class="text full-width-field row-data-element" type="text" name="rowStyles" title="Text input" ' + ((opt_data.rowStyles[opt_data.position]) ? ' value="' + soy.$$escapeHtml(opt_data.rowStyles[opt_data.position]) + '" ' : '') + '></div></div></div></div>                  <!-- row content -->' + org.swift.confluence.editor.commonGridRowActions({controlId: 'row-position-action-' + opt_data.position}) + '</div>                            \t<!-- row -->';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.rowPositionRow.soyTemplateName = 'org.swift.confluence.table.editor.rowPositionRow';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/soy/row-settings-panel.soy' */
// This file was automatically generated from row-settings-panel.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.rowSettingsPanel = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  var output = '<div class="aui-tabs horizontal-tabs"><ul class="tabs-menu"><li class="menu-item active-tab"><a href="#data-row-formatting">' + soy.$$escapeHtml('Data rows') + '</a></li><li class="menu-item"><a href="#hdr-row-formatting">' + ((opt_data.footing >= 0) ? 'Header & Footer rows' : 'Header rows') + '</a></li><li class="menu-item"><a href="#row-advanced">Advanced settings</a></li></ul><div class="tabs-pane active-pane" id="data-row-formatting"><fieldset class="appfire-grid-set">';
  var rowCount__soy12 = Math.max(0, opt_data.rowStyles.length);
  output += '<div class="grid-bar" ' + ((rowCount__soy12 < 2) ? ' style="display: none;" ' : '') + '><h3>Repeating row formatting ' + org.swift.confluence.table.editor.addHelpContent({name: 'rowFormatting', id: 'rowFormatting', helpContent: '\x3ca href\x3d\x22https://bobswift.atlassian.net/wiki/x/KQCLMw\x22 target\x3d\x22Advanced Tables Help\x22 \x3eRow styles\x3c/a\x3e accepts one or more \x3ca href\x3d\x22https://www.w3schools.com/css/default.asp\x22 target\x3d\x22_blank\x22\x3eCSS\x3c/a\x3e properties to control formatting. Row styles define a repeating style for your data rows when you specify two or more row styles.'}) + '</h3><div class="grid-bar-actions"><button class="aui-button add-grid-row" data-grid="#row-positions" resolved=""><span class="aui-icon aui-icon-small aui-iconfont-add"></span> Add formatting</button></div></div><div id="row-positions" class="scrollable-area appfire-grid"><div class="grid-empty-msg" ' + ((rowCount__soy12 > 1) ? ' style="display: none;" ' : '') + '>' + org.swift.confluence.table.editor.rowSettingsEmpty(null) + '</div>';
  var positionLimit29 = rowCount__soy12;
  for (var position29 = 1; position29 < positionLimit29; position29++) {
    output += org.swift.confluence.table.editor.rowPositionRow({position: position29, rowStyles: opt_data.rowStyles});
  }
  output += '</div></fieldset></div><div class="tabs-pane" id="hdr-row-formatting"><div class="scrollable-tab-content"><fieldset><h3>Header rows</h3>' + ((opt_data.macroName != 'attachment-table') ? '<!-- TODO: for number elements, add style to make it inline with design -->' + org.swift.confluence.table.editor.textElement({name: 'heading', type: 'number', value: opt_data.heading, label: 'Number of header rows', topLabel: 'true'}) : '') + org.swift.confluence.table.editor.textElement({name: 'headerRowStyles', type: 'text', value: opt_data.rowStyles[0], label: 'Header row styles', topLabel: 'true', helpContent: '\x3ca href\x3d\x22https://bobswift.atlassian.net/wiki/x/KQCLMw\x22 target\x3d\x22Advanced Tables Help\x22 \x3eHeader row styles\x3c/a\x3e accepts one or more \x3ca href\x3d\x22https://www.w3schools.com/css/default.asp\x22 target\x3d\x22_blank\x22\x3eCSS\x3c/a\x3e properties to control formatting.  Formatting is applied to all header rows in your table.'}) + ((opt_data.footing >= 0) ? '<h3>Footer rows</h3>' + org.swift.confluence.table.editor.textElement({name: 'footing', type: 'number', value: opt_data.footing, label: 'Number of footer rows', topLabel: 'true'}) : '') + '</fieldset></div></div><div class="tabs-pane" id="row-advanced"><div class="scrollable-tab-content"><fieldset>' + org.swift.confluence.table.editor.toggleElement({name: 'retainRowStyleOrder', value: opt_data.retainRowStyleOrder, label: 'Retain row style order after re-sorting'}) + org.swift.confluence.table.editor.toggleElement({name: 'enableHighlighting', value: opt_data.enableHighlighting, label: 'Enable row highlighting on mouse over'}) + org.swift.confluence.table.editor.textElement({name: 'highlightColor', type: 'text', value: opt_data.highlightColor, label: 'Highlight color', topLabel: 'true', helpContent: 'Highlight color shown when mouse is over a row. Use either color name or HEX value. \x3cbr\x3e \x3cb\x3eExample:\x3c/b\x3e lightgoldenrodyellow or #FAFAD2'}) + '</fieldset></div></div></div>';
  return output;
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.rowSettingsPanel.soyTemplateName = 'org.swift.confluence.table.editor.rowSettingsPanel';
}


org.swift.confluence.table.editor.rowSettingsEmpty = function(opt_data, opt_ignored) {
  return '<div class="appfire-empty"><div class="appfire-empty-image"><svg id="Row_ATEmptyState" class="play" xmlns="http://www.w3.org/2000/svg" viewBox="0 0 258.2 159.8"><path id="Row_Shadow" fill="none" stroke="#F0F0F0" stroke-width="3" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M24.6 158.3h195"/><linearGradient id="Row_Background_1_" gradientUnits="userSpaceOnUse" x1="-6117.154" y1="-753.957" x2="-6117.154" y2="-880.561" gradientTransform="translate(6246.278 880.56)"><stop offset="0" stop-color="#FFF"/><stop offset="1" stop-color="#F0FAFA"/></linearGradient><path id="Row_Background" fill="url(#Row_Background_1_)" d="M242.8 78.1c7.1 17.8 27.5 32.4-3.6 45.7-9.6 4.1-43.4-11.4-59.5-7.6-15.9 3.8-28.5 8.5-45.2 9.9-25.3 2.2-34-3.5-55.4-8.2-13.6-3-26.8 2.3-38.8.4-32.5-5.1-55-45.3-28.7-70.8 8.6-8.3 23-7.1 33.4-15.5C61.9 18.6 52.7 2.1 83 3c30.1.8 47.2 18.4 80.7 11.9 22.1-4.3 78.3-32.2 92.7 1.7 9.6 22.4-22.7 36.7-13.6 61.5z"/><g id="Row_Socket"><linearGradient id="Row_SVGID_1_" gradientUnits="userSpaceOnUse" x1="35.227" y1="124.587" x2="47.022" y2="145.016"><stop offset="0" stop-color="#FFF"/><stop offset=".5" stop-color="#F9F9F9"/><stop offset="1" stop-color="#F0F0F0"/></linearGradient><path fill="url(#Row_SVGID_1_)" d="M45.1 145.8h-8c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h8c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><path fill="none" stroke="#333" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M39.1 127.8v2M43.1 127.8v2"/><circle fill="#333" cx="41.1" cy="132.8" r="1"/><path fill="none" stroke="#333" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M39.1 137v2M43.1 137v2"/><circle fill="#333" cx="41.1" cy="142" r="1"/></g><g id="Row_Plug"><circle id="Row_PlugEnd" fill="#333" cx="41.1" cy="139.8" r="4"/><path id="Row_PlugCord" fill="none" stroke="#333" stroke-width="2" stroke-linecap="round" stroke-linejoin="round" stroke-miterlimit="10" d="M67.1 111.8h-4c-2.8 0-5 2.2-5 5v34c0 2.8-2.2 5-5 5h-7c-2.8 0-5-2.2-5-5v-10"/><path id="Row_PlugStart" fill="#333" d="M68.1 107.8c-2.2 0-4 1.8-4 4s1.8 4 4 4v-8z"/></g><g id="Row_Table"><g id="Row_TableHanger" fill="none" stroke="#F0F0F0" stroke-width="3" stroke-linejoin="round" stroke-miterlimit="10"><path d="M90.1 22.8v-23M186.1 22.8v-23"/></g><g id="Row_TableBG"><linearGradient id="Row_SVGID_2_" gradientUnits="userSpaceOnUse" x1="150.587" y1="12.381" x2="125.613" y2="154.019" gradientTransform="matrix(1 0 0 -1 0 162)"><stop offset="0" stop-color="#FFB672"/><stop offset="1" stop-color="#FCD9BE"/></linearGradient><path fill="url(#Row_SVGID_2_)" d="M204.1 17.8h-134c-1.1 0-2 .9-2 2v118c0 1.1.9 2 2 2h136c1.1 0 2-.9 2-2v-118c0-1.1-.9-2-2-2h-2z"/><path opacity=".1" fill="#FFF" d="M72.1 23.8c0-1.1.9-2 2-2h134v-2c0-1.1-.9-2-2-2h-136c-1.1 0-2 .9-2 2v118c0 1.1.9 2 2 2h2v-116z"/></g><g id="Row_Light4Off"><path fill="#F2F2F2" d="M202.1 135.8h-128c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h128c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><path opacity=".25" fill="#CCC" d="M204.1 124.3h-4.5v-4.5c0-.3-.2-.5-.5-.5s-.5.2-.5.5v10c0 .3.2.5.5.5s.5-.2.5-.5v-4.5h4.5v-1zM72.1 125.3h4.5v4.5c0 .3.2.5.5.5s.5-.2.5-.5v-10c0-.3-.2-.5-.5-.5s-.5.2-.5.5v4.5h-4.5v1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M199.1 129.8h-122M77.1 119.8h122"/></g><g id="Row_Light3Off"><path fill="#F2F2F2" d="M202.1 109.8h-128c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h128c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><path opacity=".25" fill="#CCC" d="M204.1 98.3h-4.5v-4.5c0-.3-.2-.5-.5-.5s-.5.2-.5.5v10c0 .3.2.5.5.5s.5-.2.5-.5v-4.5h4.5v-1zM72.1 99.3h4.5v4.5c0 .3.2.5.5.5s.5-.2.5-.5v-10c0-.3-.2-.5-.5-.5s-.5.2-.5.5v4.5h-4.5v1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M199.1 103.8h-122M77.1 93.8h122"/></g><g id="Row_Light2Off"><path fill="#F2F2F2" d="M202.1 83.8h-128c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h128c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><path opacity=".25" fill="#CCC" d="M204.1 72.3h-4.5v-4.5c0-.3-.2-.5-.5-.5s-.5.2-.5.5v10c0 .3.2.5.5.5s.5-.2.5-.5v-4.5h4.5v-1zM72.1 73.3h4.5v4.5c0 .3.2.5.5.5s.5-.2.5-.5v-10c0-.3-.2-.5-.5-.5s-.5.2-.5.5v4.5h-4.5v1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M199.1 77.8h-122M77.1 67.8h122"/></g><g id="Row_Light1Off"><path fill="#F2F2F2" d="M202.1 57.8h-128c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h128c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><path opacity=".25" fill="#CCC" d="M204.1 46.3h-4.5v-4.5c0-.3-.2-.5-.5-.5s-.5.2-.5.5v10c0 .3.2.5.5.5s.5-.2.5-.5v-4.5h4.5v-1zM72.1 47.3h4.5v4.5c0 .3.2.5.5.5s.5-.2.5-.5v-10c0-.3-.2-.5-.5-.5s-.5.2-.5.5v4.5h-4.5v1z"/><path fill="none" stroke="#EEE" stroke-width="2" stroke-miterlimit="10" d="M199.1 51.8h-122M77.1 41.8h122"/></g><g id="Row_LightOn3"><linearGradient id="Row_SVGID_3_" gradientUnits="userSpaceOnUse" x1="138.1" y1="109.8" x2="138.1" y2="87.8"><stop offset="0" stop-color="#89D8E5"/><stop offset=".024" stop-color="#8CDCEB"/><stop offset=".099" stop-color="#94E5F6"/><stop offset=".205" stop-color="#98EBFD"/><stop offset=".5" stop-color="#99ECFF"/><stop offset=".795" stop-color="#98EBFD"/><stop offset=".901" stop-color="#94E5F6"/><stop offset=".976" stop-color="#8CDCEB"/><stop offset="1" stop-color="#89D8E5"/></linearGradient><path fill="url(#Row_SVGID_3_)" d="M202.1 109.8h-128c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h128c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><g opacity=".5"><linearGradient id="Row_SVGID_4_" gradientUnits="userSpaceOnUse" x1="138.092" y1="97.828" x2="138.092" y2="89.8"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Row_SVGID_4_)" d="M77.1 89.8h122v8h-122z"/></g><g opacity=".5"><linearGradient id="Row_SVGID_5_" gradientUnits="userSpaceOnUse" x1="138.092" y1="107.814" x2="138.092" y2="99.786"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Row_SVGID_5_)" d="M77.1 99.8h122v8h-122z"/></g><path opacity=".1" fill="#3DB2CB" d="M204.1 98.3h-4.5v-4.5c0-.3-.2-.5-.5-.5s-.5.2-.5.5v10c0 .3.2.5.5.5s.5-.2.5-.5v-4.5h4.5v-1zM72.1 99.3h4.5v4.5c0 .3.2.5.5.5s.5-.2.5-.5v-10c0-.3-.2-.5-.5-.5s-.5.2-.5.5v4.5h-4.5v1z"/><path opacity=".25" fill="none" stroke="#FFF" stroke-width="2" stroke-linecap="round" stroke-miterlimit="10" d="M199.1 103.8h-122M77.1 93.8h122"/></g><g id="Row_LightOn1"><linearGradient id="Row_SVGID_6_" gradientUnits="userSpaceOnUse" x1="138.1" y1="57.8" x2="138.1" y2="35.8"><stop offset="0" stop-color="#89D8E5"/><stop offset=".024" stop-color="#8CDCEB"/><stop offset=".099" stop-color="#94E5F6"/><stop offset=".205" stop-color="#98EBFD"/><stop offset=".5" stop-color="#99ECFF"/><stop offset=".795" stop-color="#98EBFD"/><stop offset=".901" stop-color="#94E5F6"/><stop offset=".976" stop-color="#8CDCEB"/><stop offset="1" stop-color="#89D8E5"/></linearGradient><path fill="url(#Row_SVGID_6_)" d="M202.1 57.8h-128c-1.1 0-2-.9-2-2v-18c0-1.1.9-2 2-2h128c1.1 0 2 .9 2 2v18c0 1.1-.9 2-2 2z"/><g opacity=".5"><linearGradient id="Row_SVGID_7_" gradientUnits="userSpaceOnUse" x1="138.092" y1="45.828" x2="138.092" y2="37.8"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Row_SVGID_7_)" d="M77.1 37.8h122v8h-122z"/></g><g opacity=".5"><linearGradient id="Row_SVGID_8_" gradientUnits="userSpaceOnUse" x1="138.092" y1="55.814" x2="138.092" y2="47.786"><stop offset="0" stop-color="#99ECFF"/><stop offset=".5" stop-color="#BEFFFF"/><stop offset="1" stop-color="#99ECFF"/></linearGradient><path fill="url(#Row_SVGID_8_)" d="M77.1 47.8h122v8h-122z"/></g><path opacity=".1" fill="#3DB2CB" d="M204.1 46.3h-4.5v-4.5c0-.3-.2-.5-.5-.5s-.5.2-.5.5v10c0 .3.2.5.5.5s.5-.2.5-.5v-4.5h4.5v-1zM72.1 47.3h4.5v4.5c0 .3.2.5.5.5s.5-.2.5-.5v-10c0-.3-.2-.5-.5-.5s-.5.2-.5.5v4.5h-4.5v1z"/><path opacity=".25" fill="none" stroke="#FFF" stroke-width="2" stroke-linecap="round" stroke-miterlimit="10" d="M199.1 51.8h-122M77.1 41.8h122"/></g></g><path id="Row_Mask" fill="#FFF" d="M11.6 47.6c8.6-8.3 23-7.1 33.4-15.5C61.9 18.6 52.7 2.1 83 3c30.1.8 47.2 18.4 80.7 11.9 22.1-4.3 78.3-32.2 92.7 1.7.3.6.5 1.2.7 1.8V-.2H.1v68l.4-.1c1.3-7.1 4.8-14.1 11.1-20.1z"/></svg></div><div class="appfire-empty-content"><h3>Make your rows shine</h3><p>Adding some repeating row styles can brighten up your data and make it easier to read.</p><p>Start with <input class="rows-to-add" type="number" min="0" max="30" value="2"></input> alternating row styles.</p><p class="error" style="color:#de350b; display: none;"">Enter a number between 0 and 30.</p><button class="start-formatting aui-button aui-button-primary">Start styling</button></div></div>';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.rowSettingsEmpty.soyTemplateName = 'org.swift.confluence.table.editor.rowSettingsEmpty';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/soy/data-location-template.soy' */
// This file was automatically generated from data-location-template.soy.
// Please don't edit this file by hand.

/**
 * @fileoverview Templates in namespace org.swift.confluence.table.editor.
 */

if (typeof org == 'undefined') { var org = {}; }
if (typeof org.swift == 'undefined') { org.swift = {}; }
if (typeof org.swift.confluence == 'undefined') { org.swift.confluence = {}; }
if (typeof org.swift.confluence.table == 'undefined') { org.swift.confluence.table = {}; }
if (typeof org.swift.confluence.table.editor == 'undefined') { org.swift.confluence.table.editor = {}; }


org.swift.confluence.table.editor.dataLocationFields = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<div class="aui-group"><div class="field-group"><label for="dataLocation">' + soy.$$escapeHtml('Method of locating script') + '</label><select class="select  appfire-table-datalocation  appfire-editor-select" id="dataLocation" name="dataLocation" data-macroname="' + soy.$$escapeHtml(opt_data.macroName) + '"><option value="" ' + ((! opt_data.attachmentPage && ! opt_data.filename && ! opt_data.template && ! opt_data.url) ? ' selected ' : '') + '>None</option>' + ((opt_data.url != null) ? ' <option value="url" ' + ((opt_data.url) ? ' selected ' : '') + '>URL</option> ' : '') + '<!-- If url supported, this option is shown. And if supported and url given i.e dataLocation = url, and if attachment also given, then attachment takes precedence --><option value="attachment" ' + ((opt_data.attachmentPage) ? ' selected ' : '') + '>Attachment</option><option value="filename" ' + ((opt_data.filename) ? ' selected ' : '') + '>Filename</option><option value="template" ' + ((opt_data.template) ? ' selected ' : '') + '>Template</option></select></div></div><!-- if URL , then show url, username, pwd, connection timeout fields. Note that in some apps locating source data through Url is not supported, in those cases these fields wont be loaded. --><!-- URL related fields start-->' + ((opt_data.url != null) ? '<div class="aui-group url-group datalocation-fields" >' + org.swift.confluence.table.editor.textElement({name: 'url', value: opt_data.url, label: 'URL of  ' + soy.$$escapeHtml(opt_data.dataTypeToLocate) + '  data', topLabel: 'true'}) + org.swift.confluence.table.editor.textElement({name: 'user', value: opt_data.user, label: 'Username (if required)', topLabel: 'true'}) + org.swift.confluence.table.editor.textElement({name: 'password', type: 'password', value: opt_data.password, label: 'Password (if required)', topLabel: 'true'}) + org.swift.confluence.table.editor.textElement({name: 'timeout', type: 'number', value: opt_data.timeout, label: 'Connection timeout (milliseconds)', topLabel: 'true'}) + '</div>' : '') + '<!-- URL related fields done--><!-- attachment related fields start --><div class="aui-group attachment-group datalocation-fields" >' + org.swift.confluence.table.editor.textElement({name: 'attSpace', inputClass: 'datalocation-space long-field', value: opt_data.attSpace, label: 'Space', topLabel: 'true'}) + org.swift.confluence.table.editor.textElement({name: 'attPage', inputClass: 'datalocation-page long-field', value: opt_data.attPage, label: 'Page', topLabel: 'true', helpContent: 'The content can be loaded from a page attachment. You can also enter special values of @self, @home, or @parent. You cannot preview results for unsaved pages.'}) + org.swift.confluence.table.editor.textElement({name: 'attachment', inputClass: 'datalocation-attachment long-field', value: opt_data.attachment, label: 'Attachment', topLabel: 'true'}) + '</div><!-- attachment related fields end--><!-- filename related fields start--><div class="aui-group filename-group datalocation-fields" >' + org.swift.confluence.table.editor.textElement({name: 'filename', value: opt_data.filename, label: 'File name', topLabel: 'true', helpContent: 'The content can be loaded from files from the \x22script\x22 folder in your Confluence home directory. You can also specify the subdirectories.'}) + '</div><!-- filename related fields end --><!-- template related fields start--><div class="aui-group template-group datalocation-fields" >' + org.swift.confluence.table.editor.textElement({name: 'template', value: opt_data.template, label: 'Name of template', topLabel: 'true', helpContent: 'The content is read from either a global page template or from a space template. Enter \x22global_template_name\x22 or \x22space:template_name\x22. You cannot preview results for unsaved templates.'}) + '</div><!-- template related fields end-->';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.dataLocationFields.soyTemplateName = 'org.swift.confluence.table.editor.dataLocationFields';
}


org.swift.confluence.table.editor.macroBodyFilledMessage = function(opt_data, opt_ignored) {
  opt_data = opt_data || {};
  return '<div class="field-group appfire-macroBody-filled-message" ' + ((opt_data.macroBody == '') ? ' style="display: none;" ' : '') + '><label><span class="aui-icon aui-icon-small  aui-iconfont-info">help</span><span> ' + soy.$$escapeHtml('Note that the data from the above data source will be appended to the data provided in macro body.') + ' </span></label></div>';
};
if (goog.DEBUG) {
  org.swift.confluence.table.editor.macroBodyFilledMessage.soyTemplateName = 'org.swift.confluence.table.editor.macroBodyFilledMessage';
}

}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = 'editor/js/appfire-custom-editor.js' */
// TODO - copyright 
// 
(function(appcme, $, undefined) {
    'use strict';


    // ------------------------------------------------------------------------------------------
    //                  Common Editor Grid Handlers 
    // ------------------------------------------------------------------------------------------
    //
    //      The following handlers are available by default for all grid controls in the dialog.  
    //      You just need to be sure and apply the correct styles and you'll get the following 
    //      behaviors in your grid. 
    //      A row in the grid is demarked by a class of ".appfire-row".  It must be contained 
    //      in an ".appfire-grid".  
    //
    // Global Grid Handlers - act upon the full grid
    //      - Add a row: This requires an ".add-grid-row" action that is included 
    //        as part of the ".grid-bar".  The grid to work against must be added as a 
    //        data element(data-grid="#row-positions") to the button. This is the selector 
    //        for the grid.  
    //        The ".appfire-grid" must also have a jQuery data object with a "masterGridRow" 
    //        key on it. Ths is the grid row inserted at the end of the grid.    
    //
    // Grid Row Handlers- actions on each row of the grid
    //      - Add row above: Adds the "masterGridRow" above the current row
    //        and the grid is renumbered. 
    //      - Add row below: Adds the "masterGridRow" below the current row 
    //        and the grid is renumbered.  
    //      - Copy row: Copies the current row and stores it on the grid as a
    //        jQuery data object keyed with "copySourceGridRow" to be used later
    //        to paste a row. 
    //      - Paste row: If a row has been copied then it is pasted below the current
    //        row and the grid is renumbered.
    //      - Move row up: Moves the current row up one position.
    //      - Move row down: Moves the current row down one position. 
    //      - Clear row: Clears all input elements in the current row.  Checkboxes 
    //        are unchecked and select lists are unselected! 
    //      - Delete row: Deletes the current row and renumbers the grid. 
    // 
    // Common Editor Grid Behaviors - things that happen after commons actions on the grid occur. 
    //      - If the grid has ".row-number" elements they will get renumbered automatically.
    //      - If the grid has ".row-actions" they will be updated automatically to hook up 
    //        the aria-controls with the aui-dropdown-menu with a unique id.  Don't use the id 
    //        for anything but row actions.  
    //
    // Common Events - The following events are generated from the common editor.  Typically you 
    //        will want to filter these event using a selector based on the macro name.  The 
    //        macro name is available on the dialog as a data attribute. 
    //        e.g. [data-appfire-macro-name='csv']
    //
    //          appfireEditorAfterPreviewHide
    //          appfireEditorAfterPreviewShow
    //          appfireEditorBeforeSave
    //          appfireEditorBeforePreview
    //          appfireEditorBeforeSerialize
    //          appfireEditorBeforePreviewSerialize
    //          appfireEditorBeforeShow
    //          appfireEditorAfterShow
    //          appfireEditorGridAddRowAfterShow
    //          appfireEditorGridAddRowAfterShow
    //          appfireEditorGridAddRowAfterShow
    //          appfireEditorGridAddRowAfterShow
    //          appfireEditorGridAddRowBeforeShow
    //          appfireEditorGridAddRowBeforeShow
    //          appfireEditorGridAddRowBeforeShow
    //          appfireEditorGridAddRowBeforeShow
    //          appfireEditorGridDeleteRow
    //          appfireEditorGridMoveRowDown
    //          appfireEditorGridMoveRowUp
    // ------------------------------------------------------------------------------------------

    $(document).on("click", ".add-grid-row", function() {
        var $grid = $($(this).data("grid"));
        if ($grid){
            var $row = $grid.data("masterGridRow"); 
            appcme.addGridRow($grid, $row);
        }
        return false;
    });

    $(document).on("click", ".add-grid-row-above", function() {
        appcme.clearValidationErrors($(this).closest("form"));
        
        var id = $(this).closest("aui-dropdown-menu").attr("id");            
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row"); 
        var $grid = $currentRow.closest(".appfire-grid");
        var $row = $grid.data("masterGridRow"); 

        if ($row) {
            $row = $row.clone2().hide();

            var uniqueId = appcme.uniqueId();
            var rowActions = $row.find(".row-actions");
            rowActions.find("button[aria-controls]").attr("aria-controls", uniqueId);
            rowActions.find("aui-dropdown-menu").attr("id" , uniqueId);

            $currentRow.before($row);
            appcme.numberGridRows($grid);
            appcme.scrollAndFocusToNewRow($grid, $row);
            $row.trigger('appfireEditorGridAddRowBeforeShow', [$row]);
            $row.show().trigger('appfireEditorGridAddRowAfterShow', [$row]);    
        }
    });

    $(document).on("click", ".add-grid-row-below", function() {
        appcme.clearValidationErrors($(this).closest("form"));
        
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row"); 
        var $grid = $currentRow.closest(".appfire-grid");
        var $row = $grid.data("masterGridRow"); 

        if ($row) {
            $row = $row.clone2().hide();

            var uniqueId = appcme.uniqueId();
            var rowActions = $row.find(".row-actions");
            rowActions.find("button[aria-controls]").attr("aria-controls", uniqueId);
            rowActions.find("aui-dropdown-menu").attr("id" , uniqueId);

            $currentRow.after($row);
            appcme.numberGridRows($grid);
            appcme.scrollAndFocusToNewRow($grid, $row);
            $row.trigger('appfireEditorGridAddRowBeforeShow', [$row]);
            $row.show().trigger('appfireEditorGridAddRowAfterShow', [$row]);    
        }
    });

    $(document).on("click", ".paste-grid-row", function() {
        appcme.clearValidationErrors($(this).closest("form"));
        
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row"); 
        var $grid = $currentRow.closest(".appfire-grid");
        var $row = $grid.data("copySourceGridRow");

        if ($row) {     
            var $clone =  $row.clone2().hide();

            var uniqueId = appcme.uniqueId();
            var rowActions = $clone.find(".row-actions");
            rowActions.find("button[aria-controls]").attr("aria-controls", uniqueId);
            rowActions.find("aui-dropdown-menu").attr("id" , uniqueId);

            $currentRow.before($clone);
            appcme.numberGridRows($grid);
            appcme.scrollAndFocusToNewRow($grid, $row);
            $clone.trigger('appfireEditorGridAddRowBeforeShow', [$clone]);
            $clone.show().trigger('appfireEditorGridAddRowAfterShow', [$clone]); 
        }
    });

    $(document).on("click", ".copy-grid-row", function() {
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row"); 
        var $grid = $currentRow.closest(".appfire-grid");
        $grid.data("copySourceGridRow", $currentRow.clone2());
    });

    $(document).on("click", ".clear-grid-row", function() {
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row"); 
        $currentRow.find(":input").not(':button, :submit, :reset, :hidden')
            .val('') 
            .prop('checked', false)
            .prop('selected', false);
    });

    $(document).on("click", ".delete-grid-row", function() {
        appcme.clearValidationErrors($(this).closest("form"));
        
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row"); 
        var $grid = $currentRow.closest(".appfire-grid");
        $currentRow.remove();
        if ($grid.find(".appfire-row").length > 0 ) {
            appcme.numberGridRows($grid);
        }
        $grid.trigger('appfireEditorGridDeleteRow', [$currentRow]);
    });
    
    $(document).on("click", ".move-grid-row-up", function() {
        appcme.clearValidationErrors($(this).closest("form"));
        
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row");
        $currentRow.insertBefore($currentRow.prev());
        $currentRow.trigger('appfireEditorGridMoveRowUp', [$currentRow]);
    });
    
    $(document).on("click", ".move-grid-row-down", function() {
        appcme.clearValidationErrors($(this).closest("form"));
        
        var id = $(this).closest("aui-dropdown-menu").attr("id");
        var $currentRow =  $('[aria-controls="' + id + '"]').closest(".appfire-row");
        $currentRow.insertAfter($currentRow.next());
        $currentRow.trigger('appfireEditorGridMoveRowDown', [$currentRow]);
    });

    /**
     * This handler is here for form validation. 
     */
    $(document).on("focus", ".form-error", function() {
        var $this = $(this);
        $this.removeClass("form-error");
        // if no other form errors clear the error icon 
        if ( !$this.closest("form").find(".form-error").length ) {
            $("#show-editor-error").hide();
        }
    });

    $(document).on('click', '.appfire-navigation [data-index]', function(evt) {
        var $this = $(this), panes = $this.closest('.aui-dialog2').find('.content-panel'), pane = $(panes.get($this.data('index')));

        $this.addClass('selected').siblings().removeClass('selected');
        panes.hide();
        pane.fadeIn();

        return false;
    }).on('click', '.appfire-navigation [data-url]', function(evt) {
        window.open($(this).data('url'), '_blank'); // open url in new tab
    });
    
    /**
     * Set the value of custom toggle element based on which option chosen
     */
    $(document).on('click', '.appfire-custom-toggle', function(evt) {
        evt.preventDefault();
        var $b = $(evt.target);
        $(this).find("#"+$b.parent().attr("id")).val($b.val());
        $b.attr("aria-pressed", "true");
        $b.siblings(".aui-button").attr("aria-pressed", "false");
    });

    $(document).on('appfireEditorAfterShow appfireEditorAfterPreviewShow appfireEditorAfterPreviewHide', function() {

        // TODO: revisit this hack work-around in order to get the preview icons in MS Edge to work correctly. 
        // Leaving this code here for now. 

        //$(".appfire .appfire-navigation .secondary").css("position", "absolute");
        //$(".appfire .appfire-preview-actions .secondary").css("position", "absolute");

        // $(".appfire .appfire-navigation .secondary").hide();
        // $(".appfire .appfire-preview-actions .secondary").hide();

        // $(".appfire .appfire-navigation .secondary").show();
        // $(".appfire .appfire-preview-actions .secondary").show();
    });
    
    //
    // I've been trying to enable and disabled the paste action if nothing has been copied 
    // but can't seem to get it working correctly. 
    //
    // $(document).on("hover", ".row-actions > button", function (evt) { 
    //     if ( evt.type == "mouseenter") {
    //         var $button = $(this);
    //         var id = $button.attr("aria-controls"); 
    //         var $pasteAction = $("#"+id).find(".paste-grid-row");
    //         var $grid = $button.closest(".appfire-grid");
    //         if ($pasteAction && $grid) {
    //             if ($grid.data("copySourceGridRow")) {
    //                 $pasteAction.prop("disabled", false);
    //                 $pasteAction.removeAttr("disabled");
    //             } else {
    //                 $pasteAction.prop("disabled", true);
    //                 $pasteAction.attr("disabled", "disabled");
    //             }
    //         } 
    //     }
    // });

    /**
     * This is basically the jQuery clone function but also takes care of cloning 
     * select lists and setting the proper selected values. For some reason jQuery
     * clone doesn't do that. 
     * We could have replaced the jquery clone but thought this was safer. 
     */
    (function($,undefined) {
        $.fn.clone2 = function(withDataAndEvents, deepWithDataAndEvents) {
            var $clone = this.clone(withDataAndEvents, deepWithDataAndEvents);
            var $origSelects = $('select', this);
            var $clonedSelects = $('select', $clone);
            $('select', this).each(function(i) {
                $clonedSelects.eq(i).val($(this).val());
            });
            return $clone;
        }
    })(jQuery);

    /**
     * Adds the $row to the $grid at the end.
     * @param {jQuery Object} $grid : Grid selector 
     * @param {jQuery Object} $row  : Row selector 
     */
    appcme.addGridRow = function($grid, $row) {
        appcme.clearValidationErrors($grid.closest("form"));
        
        if ($row) {
            $row = $row.clone2().hide();

            var uniqueId = appcme.uniqueId();
            var rowActions = $row.find(".row-actions");
            rowActions.find("button[aria-controls]").attr("aria-controls", uniqueId);
            rowActions.find("aui-dropdown-menu").attr("id" , uniqueId);

            $grid.append($row);
            appcme.numberGridRows($grid);
            appcme.scrollAndFocusToNewRow($grid, $row);
            $row.trigger('appfireEditorGridAddRowBeforeShow', [$row]);
            $row.show().trigger('appfireEditorGridAddRowAfterShow', [$row]);
        }
        return $row;
    }
    
    /**
     * Updates row numbers on the grid that is passed. 
     * @param {jQuery Object} $grid : Grid selector 
     */
    appcme.numberGridRows = function($grid) {
        $grid.find(".row-number").each(function(i) {
            $(this).text(i+1);
          });
    }
    
    /**
     * Generates a random unique id that can be used for element ids. 
     */
    appcme.uniqueId = function() {
        // Loop to be sure id is unique before returning 
        var id; 
        do {
            id = (Date.now().toString(36) + Math.random().toString(36).substr(2, 5)).toUpperCase();
        }
        while ($("#"+id).length);
        return id;
    }

    /**
     * Takes a text string in standard URL-encoded notation format and converts it into property list.  
     * If passed it uses the defaultParms to determine the native parameter type and default value
     * for each parm.  If a parm value matches the defaultValue it is removed from the map.
     * This handles all parm types except non-empty arrays for the default values. If you want support 
     * for arrays with something other than an empty array that support will need to be added 
     * at some point. An array type form element is typically a repeating id, such as columnStyles in AT. 
     * You actually get multiple parms by the same id in the serialized form. 
     * 
     * @param  {string}         parms           [Parameter string of form parms in URL-encoded format]
     * @param  {property list}  defaultParms    [Default values for the parms.  ]
     * @return {property list}                  [A cleansed list of formally typed parameters]
     */
    appcme.parseParameters = function(parms, defaultParms) {
        var result = {};
        var defaultMatches = [];
        if (parms) {
            var parmsAry = parms.split('&');
            $.each(parmsAry, function(i, pair) {
                if (pair) {
                    pair = appcme.splitFirst(pair, "="); //Split only by first occurrence of '='. Ex: columnAttributes=style="border:5px solid green;" fails with regular split.
                    var parmName = pair[0];
                    var val =  window.decodeURIComponent(pair[1].replace(/\++/g, '%20'));
     
                    /** 
                     * If the parm has already been processed and is in the results
                     * don't further process the parm.  
                     */
                    if (!result[parmName]) {
    
                        /** 
                         * if there are default parms sent in then check if the values from
                         * the form match the default vals. if there is match then don't add the form
                         * value to the results.  
                         */
    
                        if (defaultParms) {
    
                            /** grab the default value */
                            var defaultVal = defaultParms[parmName];
    
                            /** 
                             * Arrays have special processing. Because there could be multiple form 
                             * elements for an array we need to be sure and pull each one from the form and 
                             * create a comma-separated list for the return value.  
                             *
                             * Example: &a=1&a=2&a=3 results in a parm of "a=1,2,3"  
                             */
                            if ($.isArray(defaultVal)) {
    
                                var parmVals = "";
    
                                /** 
                                 * Loop through the parms again looking for only matching parms to the 
                                 * array parm.  
                                 *  
                                 * This is a bit of a hack since we are looping through the values in the form
                                 * and now we loop through them again looking for array matches.  
                                 */
                                var x = $.each(parmsAry, function(y, pairAry) {
                                    var valAry = appcme.splitFirst(pairAry, "="); //Split only by first occurrence of '='
                                    if (parmName == valAry[0]) {
                                        /**
                                         * Add a temp place holder for all missing parm values the replace 
                                         * it with a "". 
                                         * Example: a=1&a=&a=&a=4 results in a=1,,,4
                                         */
                                        var tempVal = valAry[1].length ? window.decodeURIComponent(valAry[1].replace(/\++/g, '%20')) : "*EMPTY*";
                                        parmVals += (parmVals.length) ? "," + tempVal : tempVal;
                                    }
    
                                });
    
                                parmVals = parmVals.replace(/\*EMPTY\*/g, "");
                                val = parmVals;
    
                            } else if (typeof(defaultVal) === "boolean") {
                                val = val === "on" ? true : false;
                            }
                            if (defaultVal == val) {
                                // Don't return a match to the default value
                                // Double-equal is intended here since we want values like "1" and 1 compared. 
                                defaultMatches.push(parmName);
                            } else {
                                // return the parm value
                                result[parmName] = String(val);
                            }
                        } else {
                            // no default so just return it
                            result[parmName] = val;
                        }
                    }
    
                }
            });
        }
        if (defaultParms) {
            $.each(defaultParms, function(key, val) {
                if (typeof(val) === "boolean" && val && !result[key] && !appcme.includes(defaultMatches, key)) {
                    /**
                     * This is special handling for checkboxes. When unchecked 
                     * its value will not be sent in the form data because it is a false checkbox.
                     * This hanldes any checkbox with a default value of true but has been set to 
                     * unchecked (false).
                     * It's expected that any checked (true/on) checkbox will have a value in the form data. 
                     */
                    result[key] = "false";
                } else if ($.isArray(val) && (typeof result[key] !== "undefined")) {
                    /**
                     * Any form parms that are arrays without values then remove them from the final result.
                     */
                    var stripped = result[key].toString().replace(/,/g, "");
                    if (stripped.length === 0) {
                        delete result[key];
                    }
                }
            });
        }

        return result;
    };

    /**
     * Converts the value to integer
     * 
     * @param {object} value            original value to be converted to int
     * @param {object} defaultValue     default value
     * @return {Number} Respective int value for proper data and default value for improper data 
     */
    appcme.convertToNumber = function(value, defaultValue) {

        // return default value for empty or null
        // ignore boolean value and 0 else false will always return default value
        if (!value && typeof(value) != "boolean" && value !== 0) {
            return defaultValue;
        }

        //if number just convert to number and return the same 
        if (!isNaN(value) || typeof(value) === "boolean") {
            return Number(value);
        }

        //string case
        if (typeof(value) === "string") {
            if (value === 'true' || value === 'false') {
                return value === 'false' ? 0 : 1;
            }
        }

        return defaultValue;
    };

    /**
     * Call this function to handle invalidating a form elements.  
     * Currently handles all form elements the same. We could do something custom for each
     * element if needed.  
     * Although you can call this directly it's also called automatically through the supported 
     * form validator that callers register. 
     * 
     * @param {jQuery object} $$elements The element(s) to be invalidated. 
     */
    appcme.invalidate = function($elements) { 
        if ($.isArray($elements)) {
            for (var index in $elements) {
                $elements[index].addClass("form-error");
            }
        } else {
            $elements.addClass("form-error");
        }
    }

    /**
     * Answers the question of a value is in the array. Shim for missing js function.
     * @param  {array} array1       the array to search
     * @param  {object} search      the value to search for
     * @param  {int} fromIndex      array index to start search from
     * @return {boolean}            true if it's in the array, false if not
     */
    appcme.includes = function(array1, search, fromIndex) {
        return array1.includes ? array1.includes(search, fromIndex) : array1.indexOf(search, fromIndex) >= 0;
    };

    /**
     * @param {string} relativePath the relative path to a resource
     * @return {string}             the absolute path
     */
    appcme.absolutePath = function(relativePath) {
        return AJS.contextPath() + relativePath; 
    };

    /**
     * Strictly types the list of parameters and fills out the list with any defaults that are missing.
     * This allows for the use of improved JS code when dealing with actual objects instead of strings 
     * for form parms.  
     * @param  {map}    defaults    [The default values for any parms]
     * @param  {[map]} parms        [The list of parms. ]
     * @return {[map]}              [Map of parms properly typed with defaults for all missing parms]
     */
    appcme.parametersToObj = function(defaults, parms, delimiter, quote) {
        //below code is to assign default values
        delimiter = delimiter || ",";
        quote = quote || "'";
        
        var opts = $.extend({}, {
            parms: parms,
            allowBlanks: []
        });

        var retVal = {};

        for (var key in opts.parms) {
            var val = opts.parms[key];

            //Handle case sensitive parameter names.
            //Update key if case does not match
            key = appcme.findCaseInsensitiveKeyAndUpdateParams(key, defaults, opts.parms);

            if (typeof defaults[key] !== 'undefined') { // key exists in both, check types and convert if needed:
                if (!val) { // value is empty, use default:
                    val = defaults[key];
                } else if (typeof defaults[key] === 'boolean') {
                    var booleanVal = opts.parms[key];
                    if (booleanVal === 'true' || booleanVal === 'false') {
                        val = eval(booleanVal);
                    } else if (booleanVal === 'on') {
                        val = true;
                    } else {
                        val = defaults[key];
                    }
                } else if ($.isNumeric(defaults[key])) { // number
                    //Any number parameter with true/false value will be mapped to 1/0 respectively. Eg: Heading and footing 
                    if(opts.parms[key] === "false"){
                        val = 0;
                    } else if (opts.parms[key] === "true") {
                        val = 1;
                    } else {
                        val = appcme.convertToNumber(opts.parms[key], defaults[key]);
                    }
                } else if ($.isArray(defaults[key])) { // array
                    val = $.map(appcme.split(opts.parms[key], delimiter, quote), function(ele) {
                        ele = ele.trim();
                        return $.isNumeric(ele) ? Number(ele) : ele;
                    });
                }
            }

            // convert blank value if specified:
            if (val === '@blank' && appcme.includes(opts.allowBlanks, key)) {
                val = '';
            }

            retVal[key] = val;
        }

        // iterate over defaults and add things not already present:
        for (var key in defaults) {
            if (typeof retVal[key] === 'undefined') {
                retVal[key] = defaults[key];
            }
        }

        return retVal;
    };

    appcme.buildMacroRenderRequest = function(macroDetails, macroParams ) {
        var macroRenderRequest = {
                contentId: Confluence.Editor.getContentId(),
                macro: {
                    name: macroDetails.name,
                    params: macroParams,
                    //defaultParameterValue: "", //TODO: I do not see this in native preview rest API call. Is this really needed??
                    body: macroDetails.body ? macroDetails.body : "" //if body is null, then send empty body eg: when macro inserted through insert macro dialog
                }
            };
        return macroRenderRequest;
    }
        
    appcme.refreshPreview = function(previewData, macroRenderRequest){

        $.ajax({
            url: AJS.contextPath()+"/rest/tinymce/1/macro/preview", 
            type: 'POST',
            contentType: 'application/json',
            data: JSON.stringify(macroRenderRequest),
            beforeSend: function() {
                previewData.find(".editor-preview-iframe").remove();
                previewData.find(".appfire-preview-data").hide(); 
                previewData.find(".appfire-preview-loading").show();
            },
            error: function(jqXHR,  textStatus,  errorThrown) {
                previewData.find(".appfire-preview-loading").hide();
                var preview = previewData.find(".appfire-preview-data");
                preview.show();
                preview.appendTo(errorThrown);
            },
            success: function(data, textStatus, jqXHR) {
                previewData.find(".appfire-preview-loading").hide();
                previewData.find(".appfire-preview-data").show();

                var $iframe = $('<iframe frameborder="0" class="appfire editor-preview-iframe"></iframe>');
                $iframe.appendTo(previewData.find(".appfire-preview-data"));

                var w = $iframe[0].contentWindow.document;
                $iframe.on('load', function() {

                    // setting height and width avoids the extra scrollbars on the dialog
                    var $frame = $(this);
                    $frame.width("99%");
                    $frame.height("99%");
                    // reach into the iframe and snug the preview contents a tad to better fill in the preview data area
                    var $main = $frame.contents().find("#main");
                    $main.css("padding-left", "0px");
                    $main.css("padding-top", "0px");

                });

                w.open();
                w.write(data);
                w.close();
            },
            complete: function(jqXHR, textStatus, errorThrown) {
            }
        });
    }

    appcme.showEditorDialog = function($ed, macroDetails) {

        $ed.hide().appendTo("#wysiwyg").trigger('appfireEditorBeforeShow', [$ed, macroDetails]);
        $ed.find('.content-panel').hide(); // hide all content panes before displaying
        AJS.tabs.setup(); // setup any tabs on any pages

        /* Select the first tab as the active tab. If the macro has set a different
        * panel to be active then override it.  If not set the click is ignored. 
        */
        $ed.find('.appfire-navigation [data-index="0"]').click(); 
        $ed.find('.appfire-navigation [data-active-panel]').click();
        
        AJS.dialog2($ed).show();    
        $ed.trigger('appfireEditorAfterShow', [$ed]);

        // TODO manually setting height of our internal content area:
        var content = $ed.find('.aui-dialog2-content');
        content.children(':first').height("520px"); // TODO pull height from data attribute.  content.height());

        return $ed;
    }

    appcme.setMacroJsOverride = function(macroName, defaultParms, editorGenerator) {
        var previewOnloadCache = null; // Setting to null to improve debugging experience to check for multiple calls 
        AJS.MacroBrowser.setMacroJsOverride(macroName, { 
            /**
             * When inserting a new macro,  since no params set, the macroDetails wont contain any of macro params except "atlassian-macro-output-type"
             */
            opener: function(macroDetails) {
                //SQL-908/TBLSORT-122 - grab their current place in page and save before dialog display and then restore bookmark before insert/replace
                AJS.Rte.BookmarkManager.storeBookmark();
                var editorGen = editorGenerator(macroDetails); 
                var validator = editorGen.validator;
                
                //pass contextPath to be used by preview icons
                editorGen["contextPath"]=AJS.contextPath();
                
                var editorDialog = $(org.swift.confluence.editor.editorMain(editorGen));

                // Place macro name on dialog.  This is primarly used in selector for event handling. 
                editorDialog.attr("data-appfire-macro-name", macroDetails.name);
                // For good measure add the macroDetails as a data object to the dialog.
                editorDialog.data("macroDetails", macroDetails);
                // apps can pass in any extra data attributes to be stashed on the dialog. 
                if (editorGen.dataAttributes) {
                    $.each( editorGen.dataAttributes, function( prop, value ) {
                        editorDialog.attr("data-"+prop, value);
                    });    
                }

                //Added macroDetails so that macro body can be checked in csv and json-table "appfireEditorBeforeShow" handlers
                appcme.showEditorDialog(editorDialog, macroDetails);

                editorDialog.find("#editor-save-button").click(function(e) {

                    var errors = []; // array of properties for errors
                    var $form = $(this).closest("form"); 

                    editorDialog.trigger("appfireEditorBeforeSerialize", [editorDialog, $form, defaultParms, errors]);
                    
                    if (!validate(validator, errors, editorDialog, $form)) {
                        return false;
                    }

                    var parms = appcme.parseParameters($form.serialize(), defaultParms);

                    editorDialog.trigger("appfireEditorBeforeSave", [parms, editorDialog, $form, defaultParms, macroName]); //macroName is needed in the trigger handler

                    var macroRenderRequest = appcme.buildMacroRenderRequest(macroDetails, parms);
                    //Update macro body before insertMacro in the editor
                    editorDialog.trigger("appfireEditorBeforeMacroRender", [macroRenderRequest]);
                    
                    //SQL-908/TBLSORT-122 - Restore bookmark before insert/replace
                    AJS.Rte.BookmarkManager.restoreBookmark();
                    tinymce.confluence.MacroUtils.insertMacro(macroRenderRequest);
                    AJS.dialog2(editorDialog).remove();

                    return false;
                });

                editorDialog.find(".editor-dialog-close").click(function(e) {
                    AJS.dialog2(editorDialog).remove();
                    return false;
                });

                AJS.dialog2(editorDialog).on("hide", function(evt) {
                    
                    // This is a hack for https://ecosystem.atlassian.net/servicedesk/customer/portal/14/DEVHELP-1605
                    // For some reason the aui control hide event is propogating to the dialog.  This causes the dialog
                    // to close unexpectedly.  
                    var $target = $(evt.target);
                    if ($target.is(".aui-dropdown2")) {
                        return false;
                    }
                    // Restore to cached original preview function 
                    AJS.MacroBrowser.previewOnload = previewOnloadCache;
                    previewOnloadCache = null; // maybe for sake of easier debugger reset to null value. 
                    
                    $(this).remove();
                    $('aui-inline-dialog').remove(); //On hiding editor dialog, remove the inline dialogs as well.
                }); 

                editorDialog.find(".appfire-preview-show").on('click', function(e) {

                    var previewActions = editorDialog.find(".appfire-preview-actions");            
                    previewActions.find(".appfire-preview-hide").show();
                    previewActions.find(".appfire-preview-show").hide();

                    var $form = $(this).closest("form");
                    $form.find(".appfire-empty-content").css("text-align", "center");
                    /* 
                    ** More bits of code to hande the open/close of preview. 
                    */
                    editorDialog.find('[data-collapsible]').each(function(i, ele) {
                        $(ele).removeClass($(ele).data('collapsible')).addClass('col-');
                    });

                    editorDialog.find(".appfire-grid").each( function () { 
                        var $masterRow = $(this).data("masterGridRow");
                        if ($masterRow){
                            $masterRow.find('[data-collapsible]').each(function(i, ele) {
                                $(ele).removeClass($(ele).data('collapsible')).addClass('col-');
                            });
                        }
                    });

                    editorDialog.find(".appfire-preview-refresh").click();
                    e.preventDefault();
                });

                editorDialog.find(".appfire-preview-refresh").on('click', function(e) {
                    
                    var errors = []; // array of properties for errors
                    var $form = $(this).closest("form"); 

                    editorDialog.trigger("appfireEditorBeforePreviewSerialize", [editorDialog, $form, defaultParms, errors]);

                    validate(validator, errors, editorDialog, $form);                    
                    var parms = appcme.parseParameters($form.serialize(), defaultParms);
                    editorDialog.trigger("appfireEditorBeforePreview", [parms, editorDialog, $form, defaultParms, macroName]);
                                        
                    var previewData = editorDialog.find(".appfire-preview-container");
                    previewData.show();
                    editorDialog.trigger("appfireEditorAfterPreviewShow", [editorDialog]);
                    
                    var macroRequest = appcme.buildMacroRenderRequest(macroDetails, parms);
                    
                    //Update macro body before calling preview
                    editorDialog.trigger("appfireEditorBeforeMacroRender", [macroRequest]); 
                    
                    appcme.refreshPreview(previewData, macroRequest);

                    e.preventDefault();
                });

                editorDialog.find(".appfire-preview-hide").on('click', function(e) {
                    var $form = $(this).closest("form"); 
                   
                    var $previewData = $form.find(".appfire-preview-container");
                    $previewData.hide();
                    editorDialog.trigger("appfireEditorAfterPreviewHide");

                    $previewData.find(".editor-preview-iframe").remove(); 
                    $form.find(".appfire-preview-hide").hide();
                    $form.find(".appfire-preview-show").show();

                    $form.find(".appfire-empty-content").css("text-align", "left");
            
                    /* The following bits of code are here to reformat the grid row contents that have the 
                    ** "data-collapsible" class.  This exists to get the responsiveness of the grid when the 
                    ** preview is opened and closed.  
                    */
                    $form.find('[data-collapsible]').each(function(i, ele) {
                        $(ele).removeClass('col-').addClass($(ele).data('collapsible'));
                    });
                    $form.find(".appfire-grid").each( function () { 
                        var $masterRow = $(this).data("masterGridRow");
                        if ($masterRow){
                            $masterRow.find('[data-collapsible]').each(function(i, ele) {
                                $(ele).removeClass('col-').addClass($(ele).data('collapsible'));
                            });
                        }
                    });
                
                    e.preventDefault();
                });
                
                //NTBL-60: Here is what suggested on https://jira.atlassian.com/browse/CONFSERVER-36767
                // We need to cache the preview inorder to restore it when the dialog goes away so other apps 
                // will continue to work. 
                previewOnloadCache = AJS.MacroBrowser.previewOnload;
                AJS.MacroBrowser.previewOnload = function(b) {
                    return;
                }
                
            }
        });
        
    }

    /**
     * This function validates the input fields with type=number and not allowed to carry -ve value.
     */
    appcme.validatePositiveInteger = function (errors){
        var contentPane = $(".appfire-content-panes");
        var numberFields = contentPane.find("input[type=number]:invalid");
        appcme.addValidationError(numberFields, errors);
    }
    
    /**
     * Find the associated labels of the elements which failed validation and push to errors.
     */
    appcme.addValidationError = function(elements, errors){
        elements.each(function(index, element) {
            var labelText = appcme.getDisplayLabelText($(this));
            var errorText = AJS.format("{0} must be a positive integer.", labelText)
            errors.push({ ele: $(element), msg: errorText }); 
        }); 
    }
    
    /**
     * Get the label text associated with the element
     */
    appcme.getDisplayLabelText = function(element){
        var contentPane = $(".appfire-content-panes");
        var elementName = contentPane.find("label[for='" + element.attr('id') + "']").find(".appfire-editor-label-span").text();
        if(elementName === ""){
            elementName = element.attr('name'); //if no label associated with this element, consider element's name attribute
        }
        return elementName;
    }
    
    /**
     * Customized string split method to ignore delimiter within given quotes.
     * Note: It does not handle nested single quotes. Single quote must be escaped with another single quote ('').
     * 
     * @param {string} $str The string to split. 
     * @param {string} $delimiter The delimiter on which split to be happened. 
     * @param {string} $quote The quote to be considered while spltting. 
     */
    appcme.split = function($str, $delimiter, $quote) {
        if ($str == null) {
            return [];
        }
        var regexPattern = $delimiter + "(?=(?:[^" + $quote + "]*" + $quote + "[^" + $quote + "]*" + $quote + ")*[^" + $quote + "]*$)";
        return $str.split(new RegExp(regexPattern, "gi"));
    };
    
    /**
     * Customized string split method to split on first occurrence of given delimiter.
     * 
     * @param {string} str The string to split. 
     * @param {string} delimiter The delimiter on which split to be happened. 
     */
    appcme.splitFirst = function(str, delimiter) {
        if (str == null || str.length == 0) {
            return [];
        }
        var index = str.indexOf(delimiter);
        if (index == -1) {
            return [str, ""];
        } else {
            return [str.substring(0, index), str.substring(index + 1)];
        }
    };
    
    /**
     * Decodes the given encoded HTML content.
     * @param {string} html The encoded html string. 
     */
    appcme.decodeHtml = function(html) {
        var txt = document.createElement("textarea");
        txt.innerHTML = html;
        return txt.value;
    }
    
    /**
     * This is a private function that is used to support form validation.  
     * 
     * @param {function} validator The caller's validation function. Returns a boolean. 
     * @param {array} errors An array of properties for each error. {ele: jQuery element, msg: message string with html}
     * @param {jQuery} $editorDialog The customer editor dialog. 
     * @param {jQuery} $form The form in the editor.  
     */
    var validate = function(validator, errors, $editorDialog, $form) { 
        appcme.clearValidationErrors($form);
        
        if (validator) {
            validator($editorDialog, $form, errors)
        }

        if  (errors.length) {
            var body = "";
            $(errors).each(function() {
                body += this.msg;
                if ( this.ele) {
                    appcme.invalidate(this.ele);
                }
            });
            var $icon = $("#show-editor-error");
            var $msg = $("#editor-error-msg");
            $msg.find(".body").html(body);
            $icon.show();
            $msg.attr("open", "");
            //focus the first error element's tab
            highlightFirstErrorElementTab(errors[0].ele);
        }

        return errors.length == 0; 
    }
    
    /**
     * Highlight the tab, where the 1st validation error element belongs to
     */
    var highlightFirstErrorElementTab = function($elements) {
        var firstErrorElement = $elements;
        if ($.isArray($elements)) {
            firstErrorElement = $elements[0];
        } 
        if(firstErrorElement){
            var targetContentPanelIndex = firstErrorElement.closest('.content-panel').index(); //get index of the .content-panel where the first error element belongs to
            $('.appfire-navigation [data-index='+targetContentPanelIndex+']').click(); //Go to corresponding nav pane
            var tabId = firstErrorElement.closest(".tabs-pane").attr("id"); //get the tabId where the first error element belongs to
            if(tabId){
                AJS.tabs.change($('a[href="#'+tabId+'"]')); 
            }
        }
    }
    
    /**
     * This function is used to clear form validation errors.  
     * 
     * @param {jQuery} $form The form in the editor.
     */
    appcme.clearValidationErrors = function ($form) {
        var $icon = $("#show-editor-error");
        var $msg = $("#editor-error-msg");
        $msg.find('#custom-error-content').remove(); //Remove custom error content added by any other app.
        $msg.find('#default-error-content').show();
        $icon.removeClass('aui-iconfont-warning');//Remove classes added by any other app.
        $icon.removeClass('custom-icon-align'); //If warning icon added, the default alignment doesnot look good, so to align custom class if added remove that.
        $icon.addClass("aui-iconfont-error");
        $icon.hide();
        $msg.removeAttr("open");
        
        $form.find(".form-error").removeClass("form-error");
    }

    /**
     * This is a private function to find key from default parameters with case insensitive match.
     * 
     * @param {jQuery} key - key to match in default parameters.
     * @param {jQuery} defaults - default parameters.
     * @param {jQuery} parms - actual parameters list to update key.
     */
    appcme.findCaseInsensitiveKeyAndUpdateParams = function (key, defaults, parms) {
        if (key != null && defaults != null && typeof defaults[key] === 'undefined') {
            for(var prop in defaults) {
                if(prop.toLowerCase() == key.toLowerCase()) {
                    if (parms != null && parms.hasOwnProperty(key)) {
                        parms[prop] = parms[key];
                        delete parms[key];
                    }
                    return prop;
                }
            }
        }
        return key;
    }
    
    /**
     * To scroll to bottom of grid and set focus to input field in given row.
     * 
     * @param {jQuery} $grid - Grid selector.
     * @param {jQuery} $row - Current row selector.
     */
    appcme.scrollAndFocusToNewRow = function ($grid, $row) {
        $grid.animate({
            scrollTop: $grid.scrollHeight
        }, 1000);
        $row.find(":input:visible:not([disabled]):first").focus();
    }
    
    /**
     * To scroll to top of the grid and set focus to first input field found in the grid.
     * 
     * @param {jQuery} $grid - Grid selector.
     */
    appcme.scrollAndFocusToFirstRow = function ($grid) {
        $grid.scrollTop(0);
        $grid.find(".appfire-row:first").find(":input:visible:not([disabled]):first").focus();
    }

}(window.appcme = window.appcme || {}, AJS.$));
}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/js/common-table-editor.js' */
/*
 * Copyright (c) 2019 Appfire Technologies, Inc.
 * All rights reserved.
 *
 * This software is licensed under the provisions of the "Bob Swift Atlassian Add-ons EULA"
 * (https://bobswift.atlassian.net/wiki/x/WoDXBQ) as well as under the provisions of
 * the "Standard EULA" from the "Atlassian Marketplace Terms of Use" as a "Marketplace Product"
 * (http://www.atlassian.com/licensing/marketplace/termsofuse).
 *
 * See the LICENSE file for more details.
 */

//To make these props and functions accessible outside, embedded in namespace
//Note: Whenever we plan to release AT next, we can use these one and remove the duplicated ones from AT
(function(tablebasecme, $, undefined) {
    'use strict';
    
    /**
     * Macro params common to all table macros with default values
     * Param Count=20
     * TODO: AT (common-editor.js) has the duplicate of this, shall be deleted when plan to release next.
     */
    tablebasecme.commonTableParams = {
        allowExport: false,
        autoNumber: false,
        autoTotal: false,
        class: "@default",
        columnAttributes: [],
        columnCalculations: [],
        columnStyles: [],
        columnTypes: [],
        enableHeadingAttributes: true,
        enableHighlighting: true,
        enableSorting: true,
        highlightColor: "lightgoldenrodyellow",
        id: "", 
        retainRowStyleOrder: true,
        rowStyles: [],
        sortColumn: "",
        sortDescending: false,
        sortIcon: false,
        sortTip: "", 
        style: ""
    }
    
    tablebasecme.DELIMITER = ',';
    tablebasecme.QUOTE = '"';
    
    //Any validation for common table params in Table settings, row settings and column settings panels is done in this method. 
    //As this is common set of params for all table related addons, any changes needed can be done locally and no need to pass selectors.
    tablebasecme.validateCommonTableParams = function(dialog, errors) {
        var contentPane = dialog.find(".appfire-content-panes");
      //columns which allow text and number as well, and when  -ve number is not allowed
        var elementsToValidate = "input[name=sortColumn], input[name=border], input[name=width]"; 
        var elements = contentPane.find(elementsToValidate).filter( function() { 
            if($.isNumeric($(this).val()) && !($(this).val() > 0)){
            return true;
            }
        });
            
        appcme.addValidationError(elements, errors); 
        return appcme.validatePositiveInteger(errors);
    }
    
    $(document).on('appfireEditorGridAddRowBeforeShow', "[data-commontableeditor]", function(evt, newRow) {
        
        //If show col attrs menu item is checked when adding new row, display the col attr field.
        if($("#show-hide-col-attrs").attr("checked"))
            newRow.find(".column-attributes").attr("style","");
    });

    $(document).on('appfireEditorBeforeSave appfireEditorBeforePreview', "[data-commontableeditor]", function(evt, macroParms, dialog, form, defaultParms) {
        // Place code here to update the actual macro parms before the saving to the actual macro on the page
        // example: macroParms["newParm"] = "NewValue";
    
        // headerRowStyle shall be prefixed to rowStyles macro param
        if(macroParms.rowStyles || macroParms.headerRowStyles){
            macroParms.rowStyles = (macroParms.headerRowStyles ? macroParms.headerRowStyles : "") + (macroParms.rowStyles ? "," + macroParms.rowStyles : "");
        }
        delete macroParms["headerRowStyles"];
    
        /**
         * If autoNumber enabled, prepend autoNumberColStyles to columnStyles
         */
        var columnStyles = ''; //initalize it else undefined is taken when colStyles  appended in below code
        if(macroParms["autoNumber"]){
            if(macroParms["autoNumberColStyles"] && macroParms["autoNumberColStyles"].trim() !== ""){
                columnStyles = macroParms["autoNumberColStyles"] ;
            }
            
            if(macroParms["columnStyles"] && macroParms["columnStyles"].trim() !== "" ){
                columnStyles = columnStyles + "," + macroParms["columnStyles"];
            }
            macroParms["columnStyles"] = columnStyles;
        }
        //if there is no autoNumberColStyles then delete param
        if(!macroParms["autoNumberColStyles"]){
            delete macroParms["autoNumberColStyles"]; 
        }
        
    });

    /**
     * Event handler for all editors requiring common table macro support.
     */
    $(document).on('appfireEditorBeforeShow', "[data-commontableeditor]", function(evt, editor) {
    
        // Create the template row used for any new grid row adds and hang it off of each grid. 
        // This is the only step necessary to setup the different grids used.  
        //
        // Column positions grid
        var $row = $(org.swift.confluence.table.editor.columnPositionRow({position: 0, columnAttributes: "", columnCalculations: "", columnStyles: "", columnTypes: ""}));
        $("#column-positions").data("masterGridRow", $row); 
        // Row positions grid (data rows, not header rows since there is only at most one of those)
        $row = $(org.swift.confluence.table.editor.rowPositionRow({position: 0, rowStyles: ""}));
        $("#row-positions").data("masterGridRow", $row);    
    });
 
    $(document).on('change', '.column-calculations-select, .column-types-select', function(event) {
    
        var $this = $(this);
        var val = $this.find('aui-option[value="' + $this.val() +'"]').html();
        var displayVal = $this.find("input").val(); 
    
        // special code to handle when user types into the edit box.  
        if (displayVal == val) {
            // value selected from list to assign to parameter through hidden input.
            val = $this.val();
        } else if (appcme.decodeHtml(displayVal) == val) {
            //There is html encoding issue with aui-select
            //code to update the selected input text from option text.
            $this.find("input").val(val);
            $this.find("select").find('option[value="' + $this.val() +'"]').text(val);
            
            //use value of selected option.
            val = $this.val();
        } else {
            // value typed into edit box 
            val = displayVal;
        }
        $this.siblings('input:hidden').val(val);
        
    });
    
    $(document).on("click", "#show-hide-empty-pos-rows", function(evt) {
        if (evt.target.isChecked()) {
            // Show all the empty rows
            $(".show-hide-empty").show();
        } else {
            $(".show-hide-empty").each( function () { 
                var inputs = $(this).find(":input").filter( function() { 
                    return this.value;
                });
                if (!inputs.length) {
                    $(this).hide();
                } 
            });
        }
    });
    
    
    $(document).on("click", "#show-hide-col-attrs", function(evt) {
        if (evt.target.isChecked()) {
            $(".column-attributes").show();
        } else {
            $(".column-attributes").hide();
        }
    });
    
    /**
     * Handles the transition from the empty state by adding rows to 
     * either the column formats or the data row formats. 
     * 
     * This could be common I think with a bit of refactoring.   
     */
    $(document).on("click", ".start-formatting", function(e) {
    
        var $empty = $(this).closest(".appfire-empty-content"); 
        var $error = $empty.find(".error");
        $error.hide(); 
    
        var rows = Number($empty.find(".rows-to-add").val()); 
        if (rows >= 0 && rows <= 30) {
    
            var $grid = $empty.closest(".appfire-grid");
            var $row = $grid.data("masterGridRow"); 
    
            for (var i = 0; i < rows; i++) {
                appcme.addGridRow($grid, $row);        
            }
    
            var $gridSet = $empty.closest(".appfire-grid-set");
            $gridSet.find(".grid-empty-msg").hide();
            $gridSet.find(".grid-bar").show(); 
            $grid.show();
            //To scroll to first row added.
            appcme.scrollAndFocusToFirstRow($grid);
        } else {
            $error.show(); 
        }
    
        e.preventDefault();
    });

}(window.tablebasecme = window.tablebasecme || {}, AJS.$));


}catch(e){WRMCB(e)};
;
try {
/* module-key = 'org.swift.confluence.tablesorter:macroeditor-resources', location = '/table-editor/js/common-datalocation-editor.js' */
/*
 * Copyright (c) 2019 Appfire Technologies, Inc.
 * All rights reserved.
 *
 * This software is licensed under the provisions of the "Bob Swift Atlassian Add-ons EULA"
 * (https://bobswift.atlassian.net/wiki/x/WoDXBQ) as well as under the provisions of
 * the "Standard EULA" from the "Atlassian Marketplace Terms of Use" as a "Marketplace Product"
 * (http://www.atlassian.com/licensing/marketplace/termsofuse).
 *
 * See the LICENSE file for more details.
 */

//TODO: have a better namespace??
/**
 * This namespace contains all the event handlers and methods related to data location fields i.e space, page, attachment
 * @param tablebasecme
 * @param $
 * @param undefined
 * @returns
 */
(function(tablebasecme, $, undefined) {
    'use strict';
    
    tablebasecme.CURRENT_SPACE = "Current space";
    tablebasecme.CURRENT_SPACE_WITH_KEY = tablebasecme.CURRENT_SPACE + " (" + AJS.params.spaceKey + ")";
    tablebasecme.CURRENT_PAGE = "Current page" + " (@self)";
    tablebasecme.NO_ATTACHMENT_FOUND = "No attachments found";
    
    tablebasecme.specialPageValues = {
            "@parent" : "Current page parent" + " (@parent)",
            "@home" :  "Current space home page"  + " (@home)",
            "@self" : tablebasecme.CURRENT_PAGE
    }
    
    tablebasecme.specialSpaceValues = {
            "Current space": tablebasecme.CURRENT_SPACE_WITH_KEY
    }
    
    /**
     * This method is useful for macros which supports 'script' macro param (i.e supports attachment, filename, template through script param)
     */
    tablebasecme.splitScriptParam = function(macroParams){
        //For csv and json-table macro, split script param into (attachment,attachmentPage) or filename or template params if script val contains attachment reference
        if(macroParams.script){
            //if attachment
            if(macroParams.script.indexOf("^") >= 0){
                //split attachment page to space and page
                var spaceKey;
                var pageTitle;
                var attachment;
                var page = macroParams.script.substring(0, macroParams.script.indexOf("^"));
                if(page){
                    if(tablebasecme.specialPageValues.hasOwnProperty(page.toLowerCase().trim())){
                        spaceKey = ""; //Do not set current space by default
                        pageTitle = page;
                    }
                    else{
                        if(page.indexOf(":") > 0){
                            spaceKey = page.substring(0, page.indexOf(":"));
                            pageTitle = page.substring(page.indexOf(":") + 1, page.length);
                        }
                        else{
                            //space not given
                            spaceKey = tablebasecme.CURRENT_SPACE;
                            pageTitle = page;
                        }
                    }
                }
                else{ //page is empty
                    spaceKey = tablebasecme.CURRENT_SPACE;
                    pageTitle = tablebasecme.CURRENT_PAGE;
                }
                attachment = macroParams.script.substring(macroParams.script.indexOf("^")+1, macroParams.script.length);
                $.extend(macroParams, {attachmentPage: macroParams.script, attSpace: spaceKey, attPage: pageTitle, attachment: attachment});
            }
            //if filename
            else if(macroParams.script.indexOf("#") >= 0){
                var fileName = macroParams.script.substring(macroParams.script.indexOf("#")+1, macroParams.script.length)
                $.extend(macroParams, {filename: fileName});
            }
            else{ //template
                $.extend(macroParams, {template: macroParams.script});
            }
        }
        return macroParams;
    }

    //private method for validating select2 datalocation field
    var validateSelect2DataLocationField = function(contentPane, field, errors, elementName){
        var element = contentPane.find(field);
        if(element.length && element.val().trim() === ""){
            errors.push({ ele: element, msg: "<p>" + AJS.format("{0} cannot be empty.", elementName) + "</p>"});
        }
    }
    
   // TODO:  If we have more text fields that needs empty validation,  this can be refactored as a generic one, and then may be move to common-table-editor.js??
    var validateDataLocationField = function(contentPane, field, errors){
        var element = contentPane.find(field);
        if(element.length && element.val().trim() === ""){
            var elementName = appcme.getDisplayLabelText(element);
            errors.push({ ele: element, msg: "<p>" + AJS.format("{0} cannot be empty.", elementName) + "</p>"});
        }
    }
    
    tablebasecme.validateDataLocationFields = function(dialog, errors){
        var contentPane = dialog.find(".appfire-content-panes");
        
        var dataLocation = contentPane.find(".appfire-table-datalocation");
        if(dataLocation.val() === 'attachment'){
            validateSelect2DataLocationField(contentPane, "#attSpace", errors, "Space");
            validateSelect2DataLocationField(contentPane, "#attPage", errors, "Page"); //send element name for select2 fields 
            validateSelect2DataLocationField(contentPane, "#attachment", errors, "Attachment");
        }
        else if(dataLocation.val() === 'filename'){
            validateDataLocationField(contentPane, "#filename", errors);
        }
        else if(dataLocation.val() === 'template'){
            validateDataLocationField(contentPane, "#template", errors);
        }
        else if(dataLocation.val() === 'url'){
            validateDataLocationField(contentPane, "#url", errors);
        }
    }
    /**
     * On load of data source tab, display right fields based on chosen dataSource
     */
    var displayRightDataLocationFields = function(dataLocationFields, selectedDataSource){
        dataLocationFields.hide(); //hide all datasource fields
        $("." + selectedDataSource.val() + "-group").show(); //show only the required datasource fields 
    }
    
    /**
     * On datasource change, display right fields based on chosen dataSource
     */
    $(document).on('change', ".appfire-table-datalocation", function() {
        var dataLocationFields = $(this).closest("form").find(".datalocation-fields");
        displayRightDataLocationFields(dataLocationFields , $(this));
        // Set default values of space and page to current space and current page
        //if "attachment" chosen, set default values for space and page
        if($(this).val() === "attachment") {
            var space = dataLocationFields.find("#attSpace"); //TODO: think of better way instead of using id, not able to use class because with class name, more than 1 field found as select2 adds the class to dynamically created elements.
            var page = dataLocationFields.find("#attPage");
            if(space.val() === ""){
                space.auiSelect2("val",tablebasecme.CURRENT_SPACE);
            }
            if(page.val() === ""){
                page.auiSelect2("val",tablebasecme.CURRENT_PAGE);
            }
        }
     });
    
    /**
     * On change of space, empty page element, attachments element.
     */
    $(document).on('change', '.datalocation-space', function() {
        var dataLocationFields = $(this).closest(".datalocation-fields");
        dataLocationFields.find("#attPage").auiSelect2("val","");
        dataLocationFields.find("#attachment").auiSelect2("val","");
    });
    
   //Set space empty for special page values
    var setSpaceForSpecialPageValues = function(dataLocationFields, dataLocationSpace, dataLocationPage){
        var page = dataLocationPage.val();
        if(page && tablebasecme.specialPageValues.hasOwnProperty(page.toLowerCase())){ 
            dataLocationSpace.auiSelect2("val", AJS.params.spaceKey);
            dataLocationFields.find("#s2id_attSpace").find(".select2-chosen").text(tablebasecme.CURRENT_SPACE_WITH_KEY); 
        }
    }
    
    
    /**
     * On change of page, empty attachments field.
     * if its special value, then set space empty on UI, but space value is actually current space.
     * If page first selected special val, then chosen some other page, show space current space.
     * 
     */
    $(document).on('change', '.datalocation-page', function() {
        var dataLocationFields = $(this).closest(".datalocation-fields");
        dataLocationFields.find("#attachment").auiSelect2("val","");
        //if page changed to @self, @home or @parent then set space select2 value and text to current space
        setSpaceForSpecialPageValues(dataLocationFields, dataLocationFields.find("#attSpace"), $(this));
    });
    
    $(document).on('appfireEditorAfterShow', "[data-datalocationfields=true]", function(evt, editor) {

        //TODO: Find a better approach. 
        //Issue: When select2 field available on editor load, it does not allow to type in for search until an extra click is done.
        //Tried click other elements available around, but that does not work.
        // Workaround : Simply open and close the Space select2. 
        var dataLocationFields = editor.find(".datalocation-fields");
        var dataLocationSpace = dataLocationFields.find("#attSpace");
        if(dataLocationSpace.is(':visible')){
            dataLocationSpace.select2("open");
            dataLocationSpace.select2("close");
        }
        
        //For specialPageValues, set space blank
        setSpaceForSpecialPageValues(dataLocationFields, dataLocationSpace, dataLocationFields.find("#attPage"));
    });
    
    $(document).on('appfireEditorBeforeShow', "[data-datalocationfields=true]", function(evt, editor, macroDetails) {

        var dataLocationFields = editor.find(".datalocation-fields");
        displayRightDataLocationFields(dataLocationFields, editor.find(".appfire-table-datalocation"));
        
        //These elements are being referred multiple times hence the variables initialised so that it can be referred.
        var dataLocationFields = editor.find(".datalocation-fields");
        var dataLocationSpace = dataLocationFields.find("#attSpace"); //Using id here, because with class name, more than 1 field found as select2 add the class to dynamically created elements.
        var dataLocationPage = dataLocationFields.find("#attPage");
        var dataLocationAttachment = dataLocationFields.find("#attachment");
        
        /**
         * Below are the methods called by select2 
         */
         
        //This method builds the attachment rest url for attachment select2 field
        var getAttachmentSearchUrl = function(){
            var attachmentSearchUrl ;
            var page = dataLocationPage.val();
            var contentId;
            if(page && page.toLowerCase() === "@home"){
                contentId =  getHomePage();
            }
            else if(page && page.toLowerCase() === "@parent"){
                contentId = AJS.params.parentPageId ;
            }
            else if(page && page.toLowerCase() === "@self" || page.toLowerCase() === tablebasecme.CURRENT_PAGE.toLowerCase()){
                contentId = AJS.params.contentId ;
            }
            else{  
                if(page !== "" && dataLocationPage.auiSelect2('data').contentId){
                    contentId = dataLocationPage.auiSelect2('data').contentId;
                }
                else{
                    //When script filled, on load of editor, get pageId for given space and pagetitle
                    contentId = getPageId(dataLocationSpace, dataLocationPage);
                   //if no content id found, it may be a draft page. AJS.params.pageTitle do not provide pagetitle for a draft page, so use content-title element in the dom
                    if(!contentId && AJS.params.newPage && 
                            ($("#content-title.text.pagetitle").val() === dataLocationPage.val()) && (dataLocationSpace.val() === tablebasecme.CURRENT_SPACE || dataLocationSpace.val() === AJS.params.spaceKey)){ 
                        contentId = AJS.params.draftId;
                    }
                }
            }
            //Rest API to get all attachments irrespective of file type or extension
            attachmentSearchUrl = AJS.contextPath() + '/rest/api/content/'+ contentId +'/child/attachment';
            
            return attachmentSearchUrl;
        }
        
        //Get home page of current space
        var getHomePage = function(){
            var url = AJS.contextPath()+'/rest/api/space?spaceKey='+AJS.params.spaceKey+'&expand=homepage';
            var pageId ;
            
            AJS.$.when(AJS.$.ajax({
                url: url,
                type: 'GET',
                cache: true,
                async: false,
                success: function (data) {
                    if(data && data.results.length > 0)
                        pageId = data.results[0].homepage.id;
                },
                error: function (jqXHR, status, error) {
                    AJS.error(error);
                }
            })).done(function(data) {
                return pageId;
            });
            
            return pageId;
        }
        
        //Get the pageId of page being edited given space key and pagetitle. pageId is needed for fetching attachments of the page.
        var getPageId = function(dataLocationSpace, dataLocationPage){
            var space = dataLocationSpace.val();
            //if space not given or is "CurrentSpace", then consider current space key
            if(!space || space === tablebasecme.CURRENT_SPACE){
                space = AJS.params.spaceKey;
            }
            var url = "";
            if(dataLocationPage.val() != "")
                url = AJS.contextPath()+'/rest/api/search?cql=space="' + space + '"and type=page and title~"' + dataLocationPage.val() + '"';
            else
                url = AJS.contextPath()+'/rest/api/search?cql=space="' + space + '"and type=page';
            var pageId ;
            
            AJS.$.when(AJS.$.ajax({
                url: url,
                type: 'GET',
                cache: true,
                async: false,
                success: function (data) {
                    if(data && data.results.length > 0)
                        pageId = data.results[0].content.id;
                },
                error: function (jqXHR, status, error) {
                    AJS.error(error);
                }
            })).done(function(data) {
                return pageId;
            });
            
            return pageId;
        }
        
        //Return list of all spaces. Each entry will be in this form: spaceKey (space name)
        var formatSpaceResults = function(data) {
            var results = [];
            if (data && data.results.length > 0) {
                $.each(data.results, function(index, item){
                  //include all spaces, global and personal spaces
                    results.push({
                        id: item.space.key,
                        text: item.space.key + ' (' + item.space.name + ')'
                    });
                });
            }
            addToBeginOfList(results, tablebasecme.specialSpaceValues);
            return results;
        }
        
        //Return list of all page titles.
        var formatPageResults = function(data) {
            var results = [];
            if (data && data.results.length > 0) {
                $.each(data.results, function(index, item){
                    results.push({
                        id: item.content.title,
                        text: item.content.title,
                        contentId: item.content.id
                    });
                });
            }
            addToBeginOfList(results, tablebasecme.specialPageValues);
            return results;
        }
        
        var formatAttachmentResults = function(data){
            var results = [];
            if(data && data.results.length > 0){
                $.each(data.results, function(index, item){
                    results.push({
                        id: item.title,
                        text: item.title
                    });
                });
            }
            else{
                results.push({
                    id: "",
                    text: tablebasecme.NO_ATTACHMENT_FOUND
                });
            }
            return results;
        }
        
        var errorAttachmentResults = function(){
            var results = [];
            console.log("Error fetching attachments :"+error+ " "+ status);
            results.push({
                id: "",
                text: tablebasecme.NO_ATTACHMENT_FOUND
            });
            return results; 
        }
        
        var errorAttachmentParams = function(response){
            console.log("Error while fetching attachments :"+response.responseText);
            //If the url contains error for some reason, the select2 dropdown stays open and shows searching...
            //TODO: There shall be a better way to handle it. But this is what found for now.
            if(dataLocationAttachment.val() === ""){
                dataLocationAttachment.auiSelect2("val", tablebasecme.NO_ATTACHMENT_FOUND);
            }
            $("#select2-drop:visible").hide();
        }
        
        //add additionalResults to begin of results list
        var addToBeginOfList = function(sourceList, listToBeAdded){
            $.each(listToBeAdded, function(key, val){
                sourceList.unshift({
                    id: key,
                    text: val
                });
            });
            return sourceList;
        } 
        
        //TODO: Have a better name
        var select2AjaxData = function (term, page, defaultQuery, queryWithInput) { // page is the one-based page number tracked by Select2
            if(term !== ""){
                return {
                cql: queryWithInput 
               }
           }
           else{
             return {
                cql: defaultQuery 
               }  
           }
        }
        
        var searchUrl = function(){return AJS.contextPath() + '/rest/api/search';};
        var defaultSpaceQuery = function () {return "type=space";};
        var defaultPageQuery = function () { return 'type=page and space="'+ (dataLocationSpace.val() === "" || dataLocationSpace.val() === tablebasecme.CURRENT_SPACE ? AJS.params.spaceKey : dataLocationSpace.val()) + '"';};
        var pageQueryWithInput = function (term) { return 'type=page and title~"'+term+'*" and space="'+ (dataLocationSpace.val() === "" || dataLocationSpace.val() === tablebasecme.CURRENT_SPACE ? AJS.params.spaceKey : dataLocationSpace.val()) + '"';};
        var spaceQueryWithInput = function (term) { return 'type=space and space.title~"'+term+'*"';};
        var initSelectionSpace = function (element, callback) { 
            callback({
                id: element.val(),
                text: (element.val() === tablebasecme.CURRENT_SPACE  ? tablebasecme.CURRENT_SPACE_WITH_KEY : element.val())
            });
        };
        
        var initSelectionPage = function (element, callback) { 
            callback({
                id: element.val(),
                text: tablebasecme.specialPageValues.hasOwnProperty(element.val().toLowerCase()) ? tablebasecme.specialPageValues[element.val().toLowerCase()] : element.val()
            });
        };
        
        //This method enables given element select2 with dynamic search ability.
        var initSelect2 = function(element, placeHolderText, searchUrl, defaultQuery, queryWithInput, formatResults, errorResults, paramsError, initSelectionFunction ){
            element.auiSelect2({
             placeholder: placeHolderText,
             allowClear: true, //TODO: this is not working with auiselect2, but works with select2.
             ajax: {
                 url: function(){
                     return searchUrl(); //TODO: url need not be a function always, can be just a string. But to handle both string and function, we may need to add logic to check if searchUrl is of type func or not.
                 },
                 dataType: 'json',
                 type: 'GET',
                 delay: 250,
                 cache: true,
                 data: function (term, page) { // page is the one-based page number tracked by Select2 for pagination, we are not using page now.
                     if(defaultQuery != null){
                         return select2AjaxData(term, page, defaultQuery(), queryWithInput(term));
                     }
                 },
                 results: function(data, page) {
                     return {
                         results: formatResults(data)
                     };
                 },
                 error: function (jqXHR, status, error) {
                     if(errorResults != null){
                         return { results: errorResults()};
                     }
                     else {
                         return { results: formatResults(null)};
                    }
                 },
                 params: {
                     //Any error like url itself is not a valid one
                     error: function(response) {
                         console.log("Error while fetching data for "+element+ " : " + response.responseText);
                         if(paramsError != null)
                             paramsError(response);
                     }
                 }
             },
             initSelection: function(element, callback) {
                 if(initSelectionFunction != null){
                     initSelectionFunction(element, callback);
                 }
                 else{ //default initSelection implementation
                     callback({
                         id: element.val(),
                         text: element.val()
                     }); 
                 }
             },
             createSearchChoice:function(term, data) {
                 //This creates search choice with query/search term
                 return {id:term, text:term};
             },
             formatNoMatches: function (term) {
                 return "Keep typing...";
             },
         });
        }//end of function
        //enable space, page and attachment elements select2 dynamic searchable
        initSelect2(dataLocationSpace, "Select a space...", searchUrl, defaultSpaceQuery, spaceQueryWithInput, formatSpaceResults, null, null, initSelectionSpace);
        initSelect2(dataLocationPage, "Select a page...", searchUrl, defaultPageQuery, pageQueryWithInput, formatPageResults, null, null, initSelectionPage);
        initSelect2(dataLocationAttachment, "Select an attachment...", getAttachmentSearchUrl, null, null, formatAttachmentResults, errorAttachmentResults, errorAttachmentParams, null);
         
    });
    
    // Save handler code script macro param supported macrosat. 
    $(document).on('appfireEditorBeforeSave appfireEditorBeforePreview', "[data-datalocationfields=true]", function(evt, macroParms, dialog, form, defaultParms, macroName) {
        //construct script param back from splitted params and remove the non macro params
        var dataSource = dialog.find(".appfire-table-datalocation").val();
        if (dataSource === "attachment"){
            var space = macroParms["attSpace"];
            var page = macroParms["attPage"];
            var attachment = (macroParms["attachment"] !== tablebasecme.NO_ATTACHMENT_FOUND ?  "^"+macroParms["attachment"] : "");
            if(tablebasecme.specialPageValues.hasOwnProperty(page.toLowerCase())) {
                if ("@self" == page.toLowerCase()) {
                    macroParms["script"] = attachment;
                } else {
                    macroParms["script"] = page + attachment;
                }
            }
            else{
                if(space !== tablebasecme.CURRENT_SPACE){
                    macroParms["script"] = space + ":" + page + attachment;
                }
                else{//if current space
                    //if current page, then need not save space or page to be backward compatible    
                    if(page === tablebasecme.CURRENT_PAGE){
                        //delete macroParms["attachmentPage"];
                        macroParms["script"] = attachment;
                    }
                    else{
                       //if current space but different page, then just save 'page' to be backward compatible   
                        macroParms["script"] = page + attachment; 
                    }
                }
            }
        }
        else if (dataSource === "filename" && macroParms["filename"]){
            macroParms["script"] = "#"+macroParms["filename"];
        }
        else if (dataSource === "template" && macroParms["template"]){
            macroParms["script"] = macroParms["template"];
        }
        //if datasource is not url, then need not retain url related params
        if (dataSource !== "url"){
            delete macroParms["user"];
            delete macroParms["password"];
            delete macroParms["url"];
         }
        
        delete macroParms["template"];
        delete macroParms["filename"];
        delete macroParms["attSpace"];
        delete macroParms["attPage"];
        delete macroParms["attachment"];
        delete macroParms["dataLocation"];
    });
}(window.tablebasecme = window.tablebasecme || {}, AJS.$));


}catch(e){WRMCB(e)};